openapi: 3.0.3
info:
  title: Chat API
  description: API for managing conversations and messages in a chat application
  license:
    name: ''
  version: 0.1.0
paths:
  /api/bots:
    get:
      tags:
      - bots
      operationId: list_bots
      responses:
        '200':
          description: Bots retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListBotsResponse'
        '500':
          description: Internal server error
    post:
      tags:
      - bots
      operationId: create_bot
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateBotRequest'
        required: true
      responses:
        '200':
          description: Bot created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateBotResponse'
        '500':
          description: Internal server error
  /api/bots/{bot_id}:
    get:
      tags:
      - bots
      operationId: get_bot
      parameters:
      - name: bot_id
        in: path
        description: Bot identifier
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Bot retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetBotResponse'
        '404':
          description: Bot not found
        '500':
          description: Internal server error
    put:
      tags:
      - bots
      operationId: update_bot
      parameters:
      - name: bot_id
        in: path
        description: Bot identifier
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateBotRequest'
        required: true
      responses:
        '200':
          description: Bot updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateBotResponse'
        '404':
          description: Bot not found
        '500':
          description: Internal server error
    delete:
      tags:
      - bots
      operationId: delete_bot
      parameters:
      - name: bot_id
        in: path
        description: Bot identifier
        required: true
        schema:
          type: string
      responses:
        '204':
          description: Bot deleted successfully
        '404':
          description: Bot not found
        '500':
          description: Internal server error
  /api/conversations:
    get:
      tags:
      - conversations
      operationId: list_conversations
      parameters:
      - name: bot_id
        in: query
        description: Filter conversations by bot ID
        required: false
        schema:
          type: string
          nullable: true
      - name: user_id
        in: query
        description: Filter conversations by user ID
        required: false
        schema:
          type: string
          nullable: true
      responses:
        '200':
          description: Conversations retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListConversationsResponse'
        '500':
          description: Internal server error
    post:
      tags:
      - conversations
      operationId: create_conversation
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateConversationRequest'
        required: true
      responses:
        '200':
          description: Conversation created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateConversationResponse'
        '500':
          description: Internal server error
  /api/conversations/{id}:
    get:
      tags:
      - conversations
      operationId: get_conversation
      parameters:
      - name: id
        in: path
        description: Conversation ID
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Conversation retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetConversationResponse'
        '500':
          description: Internal server error
  /api/conversations/{id}/memories:
    get:
      tags:
      - conversations
      operationId: get_memories
      parameters:
      - name: id
        in: path
        description: Conversation ID
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Memories retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetMemoriesResponse'
        '404':
          description: Conversation not found
        '500':
          description: Internal server error
  /api/conversations/{id}/messages:
    post:
      tags:
      - messages
      operationId: send_message
      parameters:
      - name: id
        in: path
        description: Conversation ID
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SendMessageRequest'
        required: true
      responses:
        '202':
          description: Message sent successfully
        '500':
          description: Internal server error
components:
  schemas:
    Bot:
      type: object
      required:
      - id
      - name
      properties:
        id:
          type: string
          description: Unique identifier for the bot
          example: 550e8400-e29b-41d4-a716-446655440000
        name:
          type: string
          description: Name of the bot
          example: Ava
      example:
        id: 550e8400-e29b-41d4-a716-446655440000
        name: Ava
    Content:
      type: object
      required:
      - url
      - content_id
      properties:
        content_id:
          type: string
          description: Unique identifier for the content
          example: a1b2c3d4-e5f6-7890-abcd-ef1234567890
        url:
          type: string
          description: URL to the attached media
          example: https://your-cdn/link-to-image.jpg
      example:
        content_id: a1b2c3d4-e5f6-7890-abcd-ef1234567890
        url: https://s3.us-east-005.backblazeb2.com/clonetwin/image-123.jpg
    Conversation:
      type: object
      required:
      - id
      - messages
      - bot_id
      properties:
        bot_id:
          type: string
          description: ID of the bot associated with this conversation
        id:
          type: string
          description: The unique ID of the conversation
          example: 550e8400-e29b-41d4-a716-446655440000
        messages:
          type: array
          items:
            $ref: '#/components/schemas/Message'
          description: Messages in the conversation
        user_id:
          type: string
          description: ID of the user associated with this conversation
          nullable: true
    ConversationHeader:
      type: object
      required:
      - id
      - bot_id
      - user_id
      - message_count
      properties:
        bot_id:
          type: string
          description: ID of the bot associated with this conversation
          example: 550e8400-e29b-41d4-a716-446655440000
        id:
          type: string
          description: Unique identifier for the conversation
          example: conv_abc123def456
        last_message:
          allOf:
          - $ref: '#/components/schemas/Message'
          nullable: true
        message_count:
          type: integer
          format: int32
          description: Total number of messages in this conversation
          example: 42
          minimum: 0
        user_id:
          type: string
          description: ID of the user associated with this conversation
          example: user_123
    CreateBotRequest:
      type: object
      required:
      - name
      properties:
        name:
          type: string
          description: Name of the bot
          example: Ava
      example:
        name: Ava
    CreateBotResponse:
      type: object
      required:
      - bot
      properties:
        bot:
          $ref: '#/components/schemas/Bot'
    CreateConversationRequest:
      type: object
      required:
      - bot_id
      - user_id
      properties:
        bot_id:
          type: string
          description: ID of the bot to associate with this conversation
          example: 550e8400-e29b-41d4-a716-446655440000
        create_user_if_not_exists:
          type: boolean
          description: Whether to create the user if they don't exist. Defaults to true for seamless user onboarding
          example: true
          nullable: true
        user_id:
          type: string
          description: ID of the user to associate with this conversation. Use whatever user ID format you use in your system
          example: user_123
        with_messages:
          type: array
          items:
            $ref: '#/components/schemas/Message'
          description: Optional list of initial messages for the conversation
          nullable: true
      example:
        bot_id: 550e8400-e29b-41d4-a716-446655440000
        create_user_if_not_exists: true
        user_id: user_123
        with_messages:
        - attached_media: null
          from_bot: true
          text: Heyyy how are you??
    CreateConversationResponse:
      type: object
      required:
      - conversation
      properties:
        conversation:
          $ref: '#/components/schemas/Conversation'
      example:
        bot_id: 550e8400-e29b-41d4-a716-446655440000
        id: conv_abc123def456
        messages: []
    GetBotResponse:
      type: object
      required:
      - bot
      properties:
        bot:
          $ref: '#/components/schemas/Bot'
    GetConversationResponse:
      type: object
      required:
      - messages
      - bot_id
      - user_id
      properties:
        bot_id:
          type: string
          description: ID of the bot associated with this conversation
        messages:
          type: array
          items:
            $ref: '#/components/schemas/Message'
          description: Messages in the conversation
        user_id:
          type: string
          description: ID of the user associated with this conversation
    GetMemoriesResponse:
      type: object
      required:
      - bot_memories
      - user_memories
      properties:
        bot_memories:
          type: array
          items:
            $ref: '#/components/schemas/MemoryResponse'
          description: Bot memories for this conversation
        user_memories:
          type: array
          items:
            $ref: '#/components/schemas/MemoryResponse'
          description: User memories for this conversation
    ListBotsResponse:
      type: object
      required:
      - bots
      properties:
        bots:
          type: array
          items:
            $ref: '#/components/schemas/Bot'
          description: List of all bots
    ListConversationsResponse:
      type: object
      required:
      - conversations
      properties:
        conversations:
          type: array
          items:
            $ref: '#/components/schemas/ConversationHeader'
          description: List of conversations
      example:
        conversations:
        - bot_id: 550e8400-e29b-41d4-a716-446655440000
          id: conv_abc123def456
          messages:
          - attached_media: null
            from_bot: true
            text: Hello!
    MemoryResponse:
      type: object
      required:
      - text
      properties:
        text:
          type: string
          description: Text content of the memory
    Message:
      type: object
      required:
      - text
      - from_bot
      properties:
        attached_media:
          allOf:
          - $ref: '#/components/schemas/Content'
          nullable: true
        from_bot:
          type: boolean
          description: Whether this message is from a bot (true) or human (false)
          example: false
        id:
          type: string
          description: Unique identifier for the content
          nullable: true
        sent_at:
          type: integer
          format: int64
          description: Unix timestamp when the message was sent
          example: 1640995200
          nullable: true
        text:
          type: string
          description: The text content of the message
          example: Heyyy how are you?
      example:
        attached_media: null
        from_bot: true
        sent_at: 1640995200
        text: Heyyy how are you??
    SendMessageRequest:
      type: object
      required:
      - message
      properties:
        message:
          $ref: '#/components/schemas/Message'
      example:
        message:
          attached_media: null
          from_bot: false
          text: Hey what's your name?
    UpdateBotRequest:
      type: object
      required:
      - name
      properties:
        name:
          type: string
          description: New name of the bot
    UpdateBotResponse:
      type: object
      required:
      - bot
      properties:
        bot:
          $ref: '#/components/schemas/Bot'
tags:
- name: conversations
  description: Conversation management endpoints
- name: messages
  description: Message management endpoints
- name: bots
  description: Bot management endpoints
