openapi: 3.0.3
info:
  title: Chat API
  description: API for managing conversations and messages in a chat application
  license:
    name: ''
  version: 0.1.0
paths:
  /api/api-keys:
    get:
      tags:
      - api-keys
      operationId: list_api_keys
      responses:
        '200':
          description: API keys retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListApiKeysResponse'
        '401':
          description: Unauthorized
        '500':
          description: Internal server error
    post:
      tags:
      - api-keys
      operationId: create_api_key
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateApiKeyRequest'
        required: true
      responses:
        '200':
          description: API key created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateApiKeyResponse'
        '400':
          description: Invalid request
        '401':
          description: Unauthorized
        '500':
          description: Internal server error
  /api/api-keys/{key_id}:
    delete:
      tags:
      - api-keys
      operationId: deactivate_api_key
      parameters:
      - name: key_id
        in: path
        description: API key ID to deactivate
        required: true
        schema:
          type: string
      responses:
        '200':
          description: API key deactivated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeactivateApiKeyResponse'
        '400':
          description: Invalid key ID
        '401':
          description: Unauthorized
        '404':
          description: API key not found
        '500':
          description: Internal server error
  /api/bots:
    get:
      tags:
      - bots
      operationId: list_bots
      responses:
        '200':
          description: Bots retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListBotsResponse'
        '500':
          description: Internal server error
    post:
      tags:
      - bots
      operationId: create_bot
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateBotRequestBody'
        required: true
      responses:
        '200':
          description: Bot created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateBotResponse'
        '500':
          description: Internal server error
  /api/bots/{bot_id}:
    get:
      tags:
      - bots
      operationId: get_bot
      parameters:
      - name: bot_id
        in: path
        description: Bot identifier
        required: true
        schema:
          type: string
          format: uuid
      responses:
        '200':
          description: Bot retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetBotResponse'
        '404':
          description: Bot not found
        '500':
          description: Internal server error
    put:
      tags:
      - bots
      operationId: update_bot
      parameters:
      - name: bot_id
        in: path
        description: Bot identifier
        required: true
        schema:
          type: string
          format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateBotRequest'
        required: true
      responses:
        '200':
          description: Bot updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateBotResponse'
        '404':
          description: Bot not found
        '500':
          description: Internal server error
    delete:
      tags:
      - bots
      operationId: delete_bot
      parameters:
      - name: bot_id
        in: path
        description: Bot identifier
        required: true
        schema:
          type: string
          format: uuid
      responses:
        '204':
          description: Bot deleted successfully
        '404':
          description: Bot not found
        '500':
          description: Internal server error
  /api/content:
    get:
      tags:
      - content
      operationId: list_content
      parameters:
      - name: bot_id
        in: query
        description: Bot identifier
        required: true
        schema:
          type: string
      - name: limit
        in: query
        description: 'Maximum number of items to return (default: 30, max: 30)'
        required: false
        schema:
          type: integer
          format: int32
          nullable: true
          minimum: 0
      - name: search
        in: query
        description: Search query for semantic content search
        required: false
        schema:
          type: string
          nullable: true
      - name: media_type
        in: query
        description: 'Media type filter: ''image'' or ''video'' (defaults to all types if not specified)'
        required: false
        schema:
          allOf:
          - $ref: '#/components/schemas/MediaTypeFilter'
          nullable: true
      responses:
        '200':
          description: Content list retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListContentResponse'
        '400':
          description: Invalid query parameters
        '404':
          description: Bot not found
        '500':
          description: Internal server error
    post:
      tags:
      - content
      operationId: upload_content
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UploadContentRequest'
        required: true
      responses:
        '200':
          description: Content uploaded successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UploadContentResponse'
        '400':
          description: Invalid request - URL is not an image or bot not found
        '500':
          description: Internal server error
  /api/content/{content_id}:
    delete:
      tags:
      - content
      operationId: delete_content
      parameters:
      - name: content_id
        in: path
        description: Content identifier
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Content deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteContentResponse'
        '404':
          description: Content not found
        '500':
          description: Internal server error
  /api/conversations:
    get:
      tags:
      - conversations
      operationId: list_conversations
      parameters:
      - name: bot_id
        in: query
        description: Filter conversations by bot ID
        required: false
        schema:
          type: string
          nullable: true
      - name: user_id
        in: query
        description: Filter conversations by user ID
        required: false
        schema:
          type: string
          nullable: true
      - name: conversation_id
        in: query
        description: Filter conversations by specific conversation ID
        required: false
        schema:
          type: string
          nullable: true
      - name: min_messages
        in: query
        description: Filter conversations with at least this many messages
        required: false
        schema:
          type: integer
          format: int32
          nullable: true
      - name: max_messages
        in: query
        description: Filter conversations with at most this many messages
        required: false
        schema:
          type: integer
          format: int32
          nullable: true
      - name: message_content
        in: query
        description: Search for conversations containing this text in messages
        required: false
        schema:
          type: string
          nullable: true
      - name: min_last_message_date
        in: query
        description: Filter conversations with last message after this timestamp (Unix epoch)
        required: false
        schema:
          type: integer
          format: int32
          nullable: true
      - name: max_last_message_date
        in: query
        description: Filter conversations with last message before this timestamp (Unix epoch)
        required: false
        schema:
          type: integer
          format: int32
          nullable: true
      responses:
        '200':
          description: Conversations retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListConversationsResponse'
        '500':
          description: Internal server error
    post:
      tags:
      - conversations
      operationId: create_conversation
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateConversationRequest'
        required: true
      responses:
        '200':
          description: Conversation created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateConversationResponse'
        '500':
          description: Internal server error
  /api/conversations/{conversation_id}:
    patch:
      tags:
      - conversations
      operationId: update_conversation
      parameters:
      - name: conversation_id
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateConversationRequestBody'
        required: true
      responses:
        '200':
          description: Conversation updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateConversationResponse'
        '404':
          description: Conversation not found
        '500':
          description: Internal server error
  /api/conversations/{id}:
    get:
      tags:
      - conversations
      operationId: get_conversation
      parameters:
      - name: id
        in: path
        description: Conversation ID
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Conversation retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetConversationResponse'
        '500':
          description: Internal server error
  /api/conversations/{id}/memories:
    get:
      tags:
      - conversations
      operationId: get_memories
      parameters:
      - name: id
        in: path
        description: Conversation ID
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Memories retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetMemoriesResponse'
        '404':
          description: Conversation not found
        '500':
          description: Internal server error
  /api/conversations/{id}/messages:
    post:
      tags:
      - messages
      operationId: send_message
      parameters:
      - name: id
        in: path
        description: Conversation ID
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SendMessageRequest'
        required: true
      responses:
        '202':
          description: Message sent successfully
        '500':
          description: Internal server error
  /api/messages:
    post:
      tags:
      - messages
      summary: Send a message by finding an existing conversation or creating a new one
      description: |-
        This endpoint searches for an existing conversation between the specified user and bot.
        If found, it adds the message to that conversation. If no conversation exists, it creates
        a new conversation using the provided creation parameters and then adds the message.

        The conversation lookup is performed using the user_id and bot_id from the conversation_creation_params.
        When creating a new conversation, the full conversation_creation_params are used, including
        any initial messages and webhook configuration.
      operationId: send_message_or_create_conversation
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddMessageRequest'
        required: true
      responses:
        '200':
          description: Message added successfully, conversation found or created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AddMessageResponse'
        '500':
          description: Internal server error
  /api/users:
    get:
      tags:
      - users
      operationId: list_users
      parameters:
      - name: limit
        in: query
        description: 'Number of users to return (default: 50, max: 100)'
        required: false
        schema:
          type: integer
          format: int64
          nullable: true
      - name: offset
        in: query
        description: 'Number of users to skip (default: 0)'
        required: false
        schema:
          type: integer
          format: int64
      - name: search_id
        in: query
        description: Search by user ID (partial match)
        required: false
        schema:
          type: string
          nullable: true
      - name: search_username
        in: query
        description: Search by username (partial match)
        required: false
        schema:
          type: string
          nullable: true
      - name: sort_by
        in: query
        description: Sort users by field (created_at, last_message, message_count)
        required: false
        schema:
          type: string
      - name: sort_desc
        in: query
        description: Sort direction (true for descending, false for ascending)
        required: false
        schema:
          type: boolean
      responses:
        '200':
          description: Users retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListUsersResponse'
        '500':
          description: Internal server error
    post:
      tags:
      - users
      operationId: create_user
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserRequestBody'
        required: true
      responses:
        '200':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateUserResponse'
        '500':
          description: Internal server error
  /api/users/{user_id}:
    get:
      tags:
      - users
      operationId: get_user
      parameters:
      - name: user_id
        in: path
        description: User identifier
        required: true
        schema:
          type: string
      responses:
        '200':
          description: User retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetUserResponse'
        '404':
          description: User not found
        '500':
          description: Internal server error
    put:
      tags:
      - users
      operationId: update_user
      parameters:
      - name: user_id
        in: path
        description: User identifier
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserRequest'
        required: true
      responses:
        '200':
          description: User updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateUserResponse'
        '404':
          description: User not found
        '500':
          description: Internal server error
    delete:
      tags:
      - users
      operationId: delete_user
      parameters:
      - name: user_id
        in: path
        description: User identifier
        required: true
        schema:
          type: string
      responses:
        '204':
          description: User deleted successfully
        '404':
          description: User not found
        '500':
          description: Internal server error
components:
  schemas:
    APIAttribute:
      type: object
      required:
      - name
      - value
      properties:
        name:
          type: string
          description: Name of the attribute
          example: full_name
        value:
          type: string
          description: Value of the attribute
          example: Scarlett Jones
      example:
        name: full_name
        value: Scarlett Jones
    APIModerationCategory:
      type: string
      enum:
      - underage_site_use
      - sexual_minors
      - beastiality
      - sexual_violence
      - prompt_injection
    APIModerationInfo:
      type: object
      required:
      - category
      - reasoning
      - severity
      properties:
        category:
          $ref: '#/components/schemas/APIModerationCategory'
        reasoning:
          type: string
          description: Explanation of why this message was flagged
          example: User explicitly stated they are 16 years old, which is under the required age of 18 for this site.
        severity:
          $ref: '#/components/schemas/APIModerationSeverity'
      example:
        category: underage_site_use
        reasoning: User explicitly stated they are 16 years old, which is under the required age of 18 for this site.
        severity: Critical
    APIModerationSeverity:
      type: string
      enum:
      - Low
      - Medium
      - High
      - Critical
    APIUserWithStats:
      type: object
      required:
      - id
      - username
      - freeform
      - attributes
      - message_count
      - created_date
      properties:
        attributes:
          type: array
          items:
            $ref: '#/components/schemas/APIAttribute'
          description: List of user attributes
        created_date:
          type: string
          format: date-time
          description: Date when the user was created
        freeform:
          type: string
          description: Freeform text description
          example: John is a 28-year-old software engineer who loves hiking and photography.
        id:
          type: string
          description: Unique identifier for the user
          example: user123
        latest_message_time:
          type: string
          format: date-time
          description: Timestamp of the user's latest message (null if no messages)
          nullable: true
        message_count:
          type: integer
          format: int64
          description: Total number of messages sent by this user
          example: 42
        username:
          type: string
          description: Username of the user
          example: AdventurousJohn28
      example:
        attributes:
        - name: age
          value: '28'
        - name: location
          value: San Francisco
        - name: occupation
          value: Software Engineer
        created_date: 2023-12-15T10:30:00Z
        freeform: John is a 28-year-old software engineer who loves hiking and photography.
        id: user123
        latest_message_time: 2024-01-15T16:45:30Z
        message_count: 42
        username: AdventurousJohn28
    AddMessageRequest:
      type: object
      required:
      - message
      - conversation_creation_params
      properties:
        conversation_creation_params:
          $ref: '#/components/schemas/CreateConversationRequest'
        create_user_if_not_exists:
          type: boolean
          description: Whether to create the user if they don't exist. Defaults to false
          example: true
        message:
          $ref: '#/components/schemas/Message'
      example:
        conversation_creation_params:
          bot_id: 550e8400-e29b-41d4-a716-446655440000
          create_user_if_not_exists: true
          user_id: user_123
          webhook: https://example.com/webhook
          with_messages: []
        create_user_if_not_exists: true
        message:
          attached_media: null
          from_bot: false
          text: Hey what's your name?
    AddMessageResponse:
      type: object
      required:
      - conversation
      - created_conversation
      properties:
        conversation:
          $ref: '#/components/schemas/Conversation'
        created_conversation:
          type: boolean
          description: Whether a new conversation was created as part of this request
          example: false
      example:
        conversation:
          bot_id: 550e8400-e29b-41d4-a716-446655440000
          id: conv_abc123def456
          messages: []
        created_conversation: false
    ApiKeyInfo:
      type: object
      description: Represents an API key info (without the actual key)
      required:
      - id
      - key_prefix
      - name
      - is_active
      - created_at
      properties:
        created_at:
          type: string
          format: date-time
        id:
          type: string
          format: uuid
        is_active:
          type: boolean
        key_prefix:
          type: string
        name:
          type: string
    Bot:
      type: object
      required:
      - id
      - name
      - freeform
      - attributes
      properties:
        attributes:
          type: array
          items:
            $ref: '#/components/schemas/APIAttribute'
          description: List of bot attributes
        freeform:
          type: string
          description: Freeform text description
          example: Scarlett loves to travel, she is fresh out of college. Her personality is shy. She enjoys going to fancy restaurants and especially loves tropical destinations. Scarlett's favorite food is cheesecake
        id:
          type: string
          format: uuid
          description: Unique identifier for the bot
          example: 550e8400-e29b-41d4-a716-446655440000
        name:
          type: string
          description: Name of the bot
          example: Scarlett
      example:
        attributes:
        - name: full_name
          value: Scarlett Jones
        - name: age
          value: '23'
        - name: residence
          value: New York
        - name: location
          value: Travelling in Europe
        - name: height
          value: five foot two inches
        - name: hair
          value: long, wavy, blonde
        - name: body
          value: small but curvy
        - name: language
          value: English and French
        - name: job
          value: Real estate agent
        - name: orientation
          value: bisexual
        freeform: Scarlett loves to travel, she is fresh out of college. Her personality is shy. She enjoys going to fancy restaurants and especially loves tropical destinations. Scarlett's favorite food is cheesecake
        id: 550e8400-e29b-41d4-a716-446655440000
        name: Scarlett
    Content:
      type: object
      required:
      - url
      properties:
        content_id:
          type: string
          description: Unique identifier for the content
          example: a1b2c3d4-e5f6-7890-abcd-ef1234567890
          nullable: true
        url:
          type: string
          format: uri
          description: URL to the attached media
          example: https://your-cdn/link-to-image.jpg
      example:
        content_id: a1b2c3d4-e5f6-7890-abcd-ef1234567890
        url: https://s3.us-east-005.backblazeb2.com/priori-chat/image-123.jpg
    Conversation:
      type: object
      required:
      - id
      - messages
      - bot_id
      properties:
        bot_id:
          type: string
          format: uuid
          description: ID of the bot associated with this conversation
        id:
          type: string
          description: The unique ID of the conversation
          example: 550e8400-e29b-41d4-a716-446655440000
        messages:
          type: array
          items:
            $ref: '#/components/schemas/Message'
          description: Messages in the conversation
        user_id:
          type: string
          description: ID of the user associated with this conversation
          nullable: true
    ConversationHeader:
      type: object
      required:
      - id
      - bot_id
      - message_count
      properties:
        bot_id:
          type: string
          format: uuid
          description: ID of the bot associated with this conversation
          example: 550e8400-e29b-41d4-a716-446655440000
        id:
          type: string
          description: Unique identifier for the conversation
          example: conv_abc123def456
        last_message:
          allOf:
          - $ref: '#/components/schemas/Message'
          nullable: true
        message_count:
          type: integer
          format: int32
          description: Total number of messages in this conversation
          example: 42
          minimum: 0
        searched_message:
          allOf:
          - $ref: '#/components/schemas/SearchedMessage'
          nullable: true
        user_id:
          type: string
          description: ID of the user associated with this conversation
          example: user_123
          nullable: true
    CreateApiKeyRequest:
      type: object
      required:
      - name
      properties:
        name:
          type: string
          description: Name/description for the API key
          example: API Key
      example:
        name: API Key
    CreateApiKeyResponse:
      type: object
      required:
      - api_key
      - key_info
      properties:
        api_key:
          type: string
          description: The generated API key (only shown once)
          example: sk_name_abcdef1234567890abcdef1234567890
        key_info:
          $ref: '#/components/schemas/ApiKeyInfo'
    CreateBotRequestBody:
      type: object
      required:
      - name
      properties:
        attributes:
          type: array
          items:
            $ref: '#/components/schemas/APIAttribute'
          description: List of bot attributes
        freeform:
          type: string
          description: Freeform text description
          example: Scarlett loves to travel, she is fresh out of college.
          nullable: true
        name:
          type: string
          description: Name of the bot
          example: Scarlett
      example:
        attributes:
        - name: full_name
          value: Scarlett Jones
        - name: age
          value: '23'
        - name: residence
          value: New York
        freeform: Scarlett loves to travel, she is fresh out of college. Her personality is shy. She enjoys going to fancy restaurants and especially loves tropical destinations. Scarlett's favorite food is cheesecake
        name: Scarlett
    CreateBotResponse:
      type: object
      required:
      - bot
      properties:
        bot:
          $ref: '#/components/schemas/Bot'
    CreateConversationRequest:
      type: object
      required:
      - bot_id
      - user_id
      properties:
        bot_id:
          type: string
          format: uuid
          description: ID of the bot to associate with this conversation
          example: 550e8400-e29b-41d4-a716-446655440000
        create_user_if_not_exists:
          type: boolean
          description: Whether to create the user if they don't exist. Defaults to true for seamless user onboarding
          example: true
          nullable: true
        segment:
          type: boolean
          description: Whether to have the bot capable of responding in multiple messages (more realistic)
          example: true
          nullable: true
        user_id:
          type: string
          description: ID of the user to associate with this conversation. Use whatever user ID format you use in your system
          example: user_123
        webhook:
          type: string
          format: uri
          description: Optional webhook URL to call when messages are received in this conversation
          example: https://example.com/webhook
          nullable: true
        with_messages:
          type: array
          items:
            $ref: '#/components/schemas/Message'
          description: Optional list of initial messages for the conversation
          nullable: true
      example:
        bot_id: 550e8400-e29b-41d4-a716-446655440000
        create_user_if_not_exists: true
        user_id: user_123
        webhook: https://example.com/webhook
        with_messages:
        - attached_media: null
          from_bot: true
          text: Heyyy how are you??
    CreateConversationResponse:
      type: object
      required:
      - conversation
      properties:
        conversation:
          $ref: '#/components/schemas/Conversation'
      example:
        bot_id: 550e8400-e29b-41d4-a716-446655440000
        id: conv_abc123def456
        messages: []
    CreateUserRequestBody:
      type: object
      required:
      - id
      - username
      properties:
        attributes:
          type: array
          items:
            $ref: '#/components/schemas/APIAttribute'
          description: List of user attributes
        freeform:
          type: string
          description: Freeform text description
          example: John is a 28-year-old software engineer who loves hiking and photography.
          nullable: true
        id:
          type: string
          description: Unique ID for the user
          example: user123
        username:
          type: string
          description: Username of the user
          example: AdventurousJohn28
      example:
        attributes:
        - name: age
          value: '28'
        - name: location
          value: San Francisco
        - name: occupation
          value: Software Engineer
        freeform: John is a 28-year-old software engineer who loves hiking and photography. He enjoys traveling and trying new cuisines.
        id: user123
        username: AdventurousJohn28
    CreateUserResponse:
      type: object
      required:
      - user
      properties:
        user:
          $ref: '#/components/schemas/User'
    DeactivateApiKeyResponse:
      type: object
      required:
      - message
      properties:
        message:
          type: string
          description: Success message
    DeleteContentResponse:
      type: object
      required:
      - message
      properties:
        message:
          type: string
          description: Success message
          example: Content deleted successfully
    GetBotResponse:
      type: object
      required:
      - bot
      properties:
        bot:
          $ref: '#/components/schemas/Bot'
    GetConversationResponse:
      type: object
      required:
      - messages
      - bot_id
      properties:
        bot_id:
          type: string
          format: uuid
          description: ID of the bot associated with this conversation
        messages:
          type: array
          items:
            $ref: '#/components/schemas/Message'
          description: Messages in the conversation
        segment:
          type: boolean
          description: Whether to have the bot capable of responding in multiple messages (more realistic)
          example: true
          nullable: true
        user_id:
          type: string
          description: ID of the user associated with this conversation
          nullable: true
        webhook:
          type: string
          description: Optional webhook URL to call when messages are received in this conversation
          example: https://example.com/webhook
          nullable: true
    GetMemoriesResponse:
      type: object
      required:
      - bot_memories
      - user_memories
      properties:
        bot_memories:
          type: array
          items:
            $ref: '#/components/schemas/MemoryResponse'
          description: Bot memories for this conversation
        user_memories:
          type: array
          items:
            $ref: '#/components/schemas/MemoryResponse'
          description: User memories for this conversation
    GetUserResponse:
      type: object
      required:
      - user
      properties:
        user:
          $ref: '#/components/schemas/User'
    ListApiKeysResponse:
      type: object
      required:
      - api_keys
      properties:
        api_keys:
          type: array
          items:
            $ref: '#/components/schemas/ApiKeyInfo'
          description: List of API keys for the client
    ListBotsResponse:
      type: object
      required:
      - bots
      properties:
        bots:
          type: array
          items:
            $ref: '#/components/schemas/Bot'
          description: List of all bots
    ListContentQuery:
      type: object
      required:
      - bot_id
      properties:
        bot_id:
          type: string
          format: uuid
          description: ID of the bot to list content for
          example: 550e8400-e29b-41d4-a716-446655440000
        limit:
          type: integer
          format: int32
          description: 'Maximum number of content items to return (default: 30, max: 30)'
          example: 20
          nullable: true
          minimum: 0
        media_type:
          allOf:
          - $ref: '#/components/schemas/MediaTypeFilter'
          nullable: true
        search:
          type: string
          description: Search query for semantic content search
          example: hawaii vacation
          nullable: true
    ListContentResponse:
      type: object
      required:
      - content
      properties:
        content:
          type: array
          items:
            $ref: '#/components/schemas/Content'
          description: List of content items
    ListConversationsResponse:
      type: object
      required:
      - conversations
      properties:
        conversations:
          type: array
          items:
            $ref: '#/components/schemas/ConversationHeader'
          description: List of conversations
      example:
        conversations:
        - bot_id: 550e8400-e29b-41d4-a716-446655440000
          id: conv_abc123def456
          messages:
          - attached_media: null
            from_bot: true
            text: Hello!
    ListUsersResponse:
      type: object
      required:
      - users
      - total_count
      - has_more
      - offset
      - limit
      properties:
        has_more:
          type: boolean
          description: Whether there are more users available
        limit:
          type: integer
          format: int64
          description: Current limit
        offset:
          type: integer
          format: int64
          description: Current offset
        total_count:
          type: integer
          format: int64
          description: Total number of users matching the filter
        users:
          type: array
          items:
            $ref: '#/components/schemas/APIUserWithStats'
          description: List of users
    MediaTypeFilter:
      type: string
      enum:
      - image
      - video
    MemoryResponse:
      type: object
      required:
      - text
      properties:
        text:
          type: string
          description: Text content of the memory
    Message:
      type: object
      required:
      - text
      - from_bot
      properties:
        attached_media:
          allOf:
          - $ref: '#/components/schemas/Content'
          nullable: true
        from_bot:
          type: boolean
          description: Whether this message is from a bot (true) or human (false)
          example: false
        id:
          type: string
          format: uuid
          description: Unique identifier for the content
          nullable: true
        message_tone:
          type: string
          description: |-
            What tone was used to generate the message (useful only for debug or display in admin
            panel. Does nothing as input parameter, only output)
          example: Flirty
          nullable: true
        moderation:
          allOf:
          - $ref: '#/components/schemas/APIModerationInfo'
          nullable: true
        sent_at:
          type: integer
          format: int64
          description: Unix timestamp when the message was sent
          example: 1640995200
          nullable: true
        text:
          type: string
          description: The text content of the message
          example: Heyyy how are you?
      example:
        attached_media: null
        from_bot: true
        sent_at: 1640995200
        text: Heyyy how are you??
    SearchedMessage:
      type: object
      required:
      - message_text
      - match_start
      - match_end
      - from_bot
      - sent_at
      properties:
        from_bot:
          type: boolean
          description: Whether this message was sent by the bot
          example: false
        match_end:
          type: integer
          description: End index of the match within the message text
          example: 5
          minimum: 0
        match_start:
          type: integer
          description: Start index of the match within the message text
          example: 0
          minimum: 0
        message_text:
          type: string
          description: The text content of the matched message
          example: Hello, how are you?
        sent_at:
          type: integer
          format: int64
          description: Unix timestamp when the message was sent
          example: 1640995200
    SendMessageRequest:
      type: object
      required:
      - message
      properties:
        message:
          $ref: '#/components/schemas/Message'
      example:
        message:
          attached_media: null
          from_bot: false
          text: Hey what's your name?
    UpdateBotRequest:
      type: object
      properties:
        attributes:
          type: array
          items:
            $ref: '#/components/schemas/APIAttribute'
          description: List of bot attributes
        freeform:
          type: string
          description: Freeform text description
          example: Scarlett loves to travel, she is fresh out of college.
          nullable: true
        name:
          type: string
          description: Name of the bot
          example: Scarlett
          nullable: true
      example:
        attributes:
        - name: full_name
          value: Scarlett Jones
        - name: age
          value: '23'
        - name: residence
          value: New York
        freeform: Scarlett loves to travel, she is fresh out of college. Her personality is shy. She enjoys going to fancy restaurants and especially loves tropical destinations. Scarlett's favorite food is cheesecake
        name: Scarlett
    UpdateBotResponse:
      type: object
      required:
      - bot
      properties:
        bot:
          $ref: '#/components/schemas/Bot'
    UpdateConversationRequestBody:
      type: object
      properties:
        segment:
          type: boolean
          description: Whether to have the bot capable of responding in multiple messages (more realistic)
          example: true
          nullable: true
        webhook:
          type: string
          format: uri
          description: Optional webhook URL to call when messages are received in this conversation
          example: https://example.com/webhook
          nullable: true
      example:
        segment: true
        webhook: https://example.com/webhook
    UpdateConversationResponse:
      type: object
      required:
      - success
      properties:
        success:
          type: boolean
      example:
        success: true
    UpdateUserRequest:
      type: object
      properties:
        attributes:
          type: array
          items:
            $ref: '#/components/schemas/APIAttribute'
          description: List of user attributes
        freeform:
          type: string
          description: Freeform text description
          example: Mike is a 30-year-old photographer who loves outdoor adventures.
          nullable: true
        username:
          type: string
          description: Username of the user
          example: AdventurousMike28
          nullable: true
      example:
        attributes:
        - name: age
          value: '30'
        - name: location
          value: Seattle
        - name: occupation
          value: Photographer
        freeform: Mike is a 30-year-old photographer who loves outdoor adventures and spontaneous weekend trips. Always up for trying new restaurants and meeting interesting people.
        username: AdventurousMike28
    UpdateUserResponse:
      type: object
      required:
      - user
      properties:
        user:
          $ref: '#/components/schemas/User'
    UploadContentRequest:
      type: object
      required:
      - image_url
      - bot_id
      properties:
        bot_id:
          type: string
          format: uuid
          description: ID of the bot this content belongs to
          example: 550e8400-e29b-41d4-a716-446655440000
        image_url:
          type: string
          description: URL of the image to upload (can be a remote URL like https://example.com/image.jpg or a data URL like data:image/jpeg;base64,...)
          example: https://example.com/image.jpg
      example:
        bot_id: 550e8400-e29b-41d4-a716-446655440000
        image_url: https://example.com/image.jpg
    UploadContentResponse:
      type: object
      required:
      - content
      properties:
        content:
          $ref: '#/components/schemas/Content'
    User:
      type: object
      required:
      - id
      - username
      - freeform
      - attributes
      properties:
        attributes:
          type: array
          items:
            $ref: '#/components/schemas/APIAttribute'
          description: List of user attributes
        freeform:
          type: string
          description: Freeform text description
          example: John is a 28-year-old software engineer who loves hiking and photography.
        id:
          type: string
          description: Unique identifier for the user
          example: user123
        username:
          type: string
          description: Username of the user
          example: AdventurousJohn28
      example:
        attributes:
        - name: age
          value: '28'
        - name: location
          value: San Francisco
        - name: occupation
          value: Software Engineer
        - name: interests
          value: Hiking, Photography, Travel
        - name: relationship_status
          value: Single
        - name: preferences
          value: Outdoor activities, Tech meetups
        freeform: John is a 28-year-old software engineer who loves hiking and photography. He enjoys traveling and trying new cuisines.
        id: user123
        username: AdventurousJohn28
tags:
- name: conversations
  description: Conversation management endpoints
- name: messages
  description: Message management endpoints
- name: bots
  description: Bot management endpoints
- name: users
  description: User management endpoints
- name: api-keys
  description: API key management endpoints
- name: content
  description: Content management endpoints
