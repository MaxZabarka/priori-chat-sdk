// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, TDataShape, Client } from "./client";
import type {
  ListBotsData,
  ListBotsResponses,
  ListBotsErrors,
  CreateBotData,
  CreateBotResponses,
  CreateBotErrors,
  DeleteBotData,
  DeleteBotResponses,
  DeleteBotErrors,
  GetBotData,
  GetBotResponses,
  GetBotErrors,
  UpdateBotData,
  UpdateBotResponses,
  UpdateBotErrors,
  ListConversationsData,
  ListConversationsResponses,
  ListConversationsErrors,
  CreateConversationData,
  CreateConversationResponses,
  CreateConversationErrors,
  GetConversationData,
  GetConversationResponses,
  GetConversationErrors,
  SendMessageData,
  SendMessageResponses,
  SendMessageErrors,
} from "./types.gen";
import { client as _heyApiClient } from "./client.gen";

export type Options<
  TData extends TDataShape = TDataShape,
  ThrowOnError extends boolean = boolean,
> = ClientOptions<TData, ThrowOnError> & {
  /**
   * You can provide a client instance returned by `createClient()` instead of
   * individual options. This might be also useful if you want to implement a
   * custom client.
   */
  client?: Client;
  /**
   * You can pass arbitrary values through the `meta` object. This can be
   * used to access values that aren't defined as part of the SDK function.
   */
  meta?: Record<string, unknown>;
};

export const listBots = <ThrowOnError extends boolean = true>(
  options?: Options<ListBotsData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    ListBotsResponses,
    ListBotsErrors,
    ThrowOnError
  >({
    responseType: "json",
    url: "/api/bots",
    ...options,
  });
};

export const createBot = <ThrowOnError extends boolean = true>(
  options: Options<CreateBotData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    CreateBotResponses,
    CreateBotErrors,
    ThrowOnError
  >({
    responseType: "json",
    url: "/api/bots",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

export const deleteBot = <ThrowOnError extends boolean = true>(
  options: Options<DeleteBotData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).delete<
    DeleteBotResponses,
    DeleteBotErrors,
    ThrowOnError
  >({
    url: "/api/bots/{bot_id}",
    ...options,
  });
};

export const getBot = <ThrowOnError extends boolean = true>(
  options: Options<GetBotData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetBotResponses,
    GetBotErrors,
    ThrowOnError
  >({
    responseType: "json",
    url: "/api/bots/{bot_id}",
    ...options,
  });
};

export const updateBot = <ThrowOnError extends boolean = true>(
  options: Options<UpdateBotData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).put<
    UpdateBotResponses,
    UpdateBotErrors,
    ThrowOnError
  >({
    responseType: "json",
    url: "/api/bots/{bot_id}",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

export const listConversations = <ThrowOnError extends boolean = true>(
  options?: Options<ListConversationsData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    ListConversationsResponses,
    ListConversationsErrors,
    ThrowOnError
  >({
    responseType: "json",
    url: "/api/conversations",
    ...options,
  });
};

export const createConversation = <ThrowOnError extends boolean = true>(
  options: Options<CreateConversationData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    CreateConversationResponses,
    CreateConversationErrors,
    ThrowOnError
  >({
    responseType: "json",
    url: "/api/conversations",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

export const getConversation = <ThrowOnError extends boolean = true>(
  options: Options<GetConversationData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetConversationResponses,
    GetConversationErrors,
    ThrowOnError
  >({
    responseType: "json",
    url: "/api/conversations/{id}",
    ...options,
  });
};

export const sendMessage = <ThrowOnError extends boolean = true>(
  options: Options<SendMessageData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    SendMessageResponses,
    SendMessageErrors,
    ThrowOnError
  >({
    url: "/api/conversations/{id}/messages",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};
