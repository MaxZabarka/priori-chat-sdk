// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, TDataShape, Client } from "./client";
import type {
  ListApiKeysData,
  ListApiKeysResponses,
  ListApiKeysErrors,
  CreateApiKeyData,
  CreateApiKeyResponses,
  CreateApiKeyErrors,
  DeactivateApiKeyData,
  DeactivateApiKeyResponses,
  DeactivateApiKeyErrors,
  ListBotsData,
  ListBotsResponses,
  ListBotsErrors,
  CreateBotData,
  CreateBotResponses,
  CreateBotErrors,
  DeleteBotData,
  DeleteBotResponses,
  DeleteBotErrors,
  GetBotData,
  GetBotResponses,
  GetBotErrors,
  UpdateBotData,
  UpdateBotResponses,
  UpdateBotErrors,
  ListContentData,
  ListContentResponses,
  ListContentErrors,
  UploadContentData,
  UploadContentResponses,
  UploadContentErrors,
  DeleteContentData,
  DeleteContentResponses,
  DeleteContentErrors,
  ListConversationsData,
  ListConversationsResponses,
  ListConversationsErrors,
  CreateConversationData,
  CreateConversationResponses,
  CreateConversationErrors,
  UpdateConversationData,
  UpdateConversationResponses,
  UpdateConversationErrors,
  GetConversationData,
  GetConversationResponses,
  GetConversationErrors,
  GetMemoriesData,
  GetMemoriesResponses,
  GetMemoriesErrors,
  SendMessageData,
  SendMessageResponses,
  SendMessageErrors,
} from "./types.gen";
import { client as _heyApiClient } from "./client.gen";

export type Options<
  TData extends TDataShape = TDataShape,
  ThrowOnError extends boolean = boolean,
> = ClientOptions<TData, ThrowOnError> & {
  /**
   * You can provide a client instance returned by `createClient()` instead of
   * individual options. This might be also useful if you want to implement a
   * custom client.
   */
  client?: Client;
  /**
   * You can pass arbitrary values through the `meta` object. This can be
   * used to access values that aren't defined as part of the SDK function.
   */
  meta?: Record<string, unknown>;
};

export const listApiKeys = <ThrowOnError extends boolean = true>(
  options?: Options<ListApiKeysData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    ListApiKeysResponses,
    ListApiKeysErrors,
    ThrowOnError
  >({
    responseType: "json",
    url: "/api/api-keys",
    ...options,
  });
};

export const createApiKey = <ThrowOnError extends boolean = true>(
  options: Options<CreateApiKeyData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    CreateApiKeyResponses,
    CreateApiKeyErrors,
    ThrowOnError
  >({
    responseType: "json",
    url: "/api/api-keys",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

export const deactivateApiKey = <ThrowOnError extends boolean = true>(
  options: Options<DeactivateApiKeyData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).delete<
    DeactivateApiKeyResponses,
    DeactivateApiKeyErrors,
    ThrowOnError
  >({
    responseType: "json",
    url: "/api/api-keys/{key_id}",
    ...options,
  });
};

export const listBots = <ThrowOnError extends boolean = true>(
  options?: Options<ListBotsData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    ListBotsResponses,
    ListBotsErrors,
    ThrowOnError
  >({
    responseType: "json",
    url: "/api/bots",
    ...options,
  });
};

export const createBot = <ThrowOnError extends boolean = true>(
  options: Options<CreateBotData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    CreateBotResponses,
    CreateBotErrors,
    ThrowOnError
  >({
    responseType: "json",
    url: "/api/bots",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

export const deleteBot = <ThrowOnError extends boolean = true>(
  options: Options<DeleteBotData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).delete<
    DeleteBotResponses,
    DeleteBotErrors,
    ThrowOnError
  >({
    url: "/api/bots/{bot_id}",
    ...options,
  });
};

export const getBot = <ThrowOnError extends boolean = true>(
  options: Options<GetBotData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetBotResponses,
    GetBotErrors,
    ThrowOnError
  >({
    responseType: "json",
    url: "/api/bots/{bot_id}",
    ...options,
  });
};

export const updateBot = <ThrowOnError extends boolean = true>(
  options: Options<UpdateBotData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).put<
    UpdateBotResponses,
    UpdateBotErrors,
    ThrowOnError
  >({
    responseType: "json",
    url: "/api/bots/{bot_id}",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

export const listContent = <ThrowOnError extends boolean = true>(
  options: Options<ListContentData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    ListContentResponses,
    ListContentErrors,
    ThrowOnError
  >({
    responseType: "json",
    url: "/api/content",
    ...options,
  });
};

export const uploadContent = <ThrowOnError extends boolean = true>(
  options: Options<UploadContentData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    UploadContentResponses,
    UploadContentErrors,
    ThrowOnError
  >({
    responseType: "json",
    url: "/api/content",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

export const deleteContent = <ThrowOnError extends boolean = true>(
  options: Options<DeleteContentData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).delete<
    DeleteContentResponses,
    DeleteContentErrors,
    ThrowOnError
  >({
    responseType: "json",
    url: "/api/content/{content_id}",
    ...options,
  });
};

export const listConversations = <ThrowOnError extends boolean = true>(
  options?: Options<ListConversationsData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    ListConversationsResponses,
    ListConversationsErrors,
    ThrowOnError
  >({
    responseType: "json",
    url: "/api/conversations",
    ...options,
  });
};

export const createConversation = <ThrowOnError extends boolean = true>(
  options: Options<CreateConversationData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    CreateConversationResponses,
    CreateConversationErrors,
    ThrowOnError
  >({
    responseType: "json",
    url: "/api/conversations",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

export const updateConversation = <ThrowOnError extends boolean = true>(
  options: Options<UpdateConversationData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).patch<
    UpdateConversationResponses,
    UpdateConversationErrors,
    ThrowOnError
  >({
    responseType: "json",
    url: "/api/conversations/{conversation_id}",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

export const getConversation = <ThrowOnError extends boolean = true>(
  options: Options<GetConversationData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetConversationResponses,
    GetConversationErrors,
    ThrowOnError
  >({
    responseType: "json",
    url: "/api/conversations/{id}",
    ...options,
  });
};

export const getMemories = <ThrowOnError extends boolean = true>(
  options: Options<GetMemoriesData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetMemoriesResponses,
    GetMemoriesErrors,
    ThrowOnError
  >({
    responseType: "json",
    url: "/api/conversations/{id}/memories",
    ...options,
  });
};

export const sendMessage = <ThrowOnError extends boolean = true>(
  options: Options<SendMessageData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    SendMessageResponses,
    SendMessageErrors,
    ThrowOnError
  >({
    url: "/api/conversations/{id}/messages",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};
