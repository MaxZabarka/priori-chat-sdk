// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, TDataShape, Client } from './client';
import type { ListApiKeysData, ListApiKeysResponses, ListApiKeysErrors, CreateApiKeyData, CreateApiKeyResponses, CreateApiKeyErrors, DeactivateApiKeyData, DeactivateApiKeyResponses, DeactivateApiKeyErrors, ListBotsData, ListBotsResponses, ListBotsErrors, CreateBotData, CreateBotResponses, CreateBotErrors, DeleteBotData, DeleteBotResponses, DeleteBotErrors, GetBotData, GetBotResponses, GetBotErrors, UpdateBotData, UpdateBotResponses, UpdateBotErrors, GetClientConfigData, GetClientConfigResponses, GetClientConfigErrors, UpdateClientConfigData, UpdateClientConfigResponses, UpdateClientConfigErrors, ListContentData, ListContentResponses, ListContentErrors, UploadContentData, UploadContentResponses, UploadContentErrors, DeleteContentData, DeleteContentResponses, DeleteContentErrors, ListConversationsData, ListConversationsResponses, ListConversationsErrors, CreateConversationData, CreateConversationResponses, CreateConversationErrors, UpdateConversationData, UpdateConversationResponses, UpdateConversationErrors, GetConversationData, GetConversationResponses, GetConversationErrors, GenerateResponseSyncData, GenerateResponseSyncResponses, GenerateResponseSyncErrors, GetMemoriesData, GetMemoriesResponses, GetMemoriesErrors, SendMessageData, SendMessageResponses, SendMessageErrors, SendMessageOrCreateConversationData, SendMessageOrCreateConversationResponses, SendMessageOrCreateConversationErrors, ListUsersData, ListUsersResponses, ListUsersErrors, CreateUserData, CreateUserResponses, CreateUserErrors, DeleteUserData, DeleteUserResponses, DeleteUserErrors, GetUserData, GetUserResponses, GetUserErrors, UpdateUserData, UpdateUserResponses, UpdateUserErrors } from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

export const listApiKeys = <ThrowOnError extends boolean = true>(options?: Options<ListApiKeysData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ListApiKeysResponses, ListApiKeysErrors, ThrowOnError>({
        responseType: 'json',
        url: '/api/api-keys',
        ...options
    });
};

export const createApiKey = <ThrowOnError extends boolean = true>(options: Options<CreateApiKeyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateApiKeyResponses, CreateApiKeyErrors, ThrowOnError>({
        responseType: 'json',
        url: '/api/api-keys',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const deactivateApiKey = <ThrowOnError extends boolean = true>(options: Options<DeactivateApiKeyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeactivateApiKeyResponses, DeactivateApiKeyErrors, ThrowOnError>({
        responseType: 'json',
        url: '/api/api-keys/{key_id}',
        ...options
    });
};

export const listBots = <ThrowOnError extends boolean = true>(options?: Options<ListBotsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ListBotsResponses, ListBotsErrors, ThrowOnError>({
        responseType: 'json',
        url: '/api/bots',
        ...options
    });
};

export const createBot = <ThrowOnError extends boolean = true>(options: Options<CreateBotData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateBotResponses, CreateBotErrors, ThrowOnError>({
        responseType: 'json',
        url: '/api/bots',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const deleteBot = <ThrowOnError extends boolean = true>(options: Options<DeleteBotData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteBotResponses, DeleteBotErrors, ThrowOnError>({
        url: '/api/bots/{bot_id}',
        ...options
    });
};

export const getBot = <ThrowOnError extends boolean = true>(options: Options<GetBotData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetBotResponses, GetBotErrors, ThrowOnError>({
        responseType: 'json',
        url: '/api/bots/{bot_id}',
        ...options
    });
};

export const updateBot = <ThrowOnError extends boolean = true>(options: Options<UpdateBotData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UpdateBotResponses, UpdateBotErrors, ThrowOnError>({
        responseType: 'json',
        url: '/api/bots/{bot_id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const getClientConfig = <ThrowOnError extends boolean = true>(options?: Options<GetClientConfigData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetClientConfigResponses, GetClientConfigErrors, ThrowOnError>({
        responseType: 'json',
        url: '/api/config',
        ...options
    });
};

export const updateClientConfig = <ThrowOnError extends boolean = true>(options: Options<UpdateClientConfigData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<UpdateClientConfigResponses, UpdateClientConfigErrors, ThrowOnError>({
        responseType: 'json',
        url: '/api/config',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const listContent = <ThrowOnError extends boolean = true>(options: Options<ListContentData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ListContentResponses, ListContentErrors, ThrowOnError>({
        responseType: 'json',
        url: '/api/content',
        ...options
    });
};

export const uploadContent = <ThrowOnError extends boolean = true>(options: Options<UploadContentData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<UploadContentResponses, UploadContentErrors, ThrowOnError>({
        responseType: 'json',
        url: '/api/content',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const deleteContent = <ThrowOnError extends boolean = true>(options: Options<DeleteContentData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteContentResponses, DeleteContentErrors, ThrowOnError>({
        responseType: 'json',
        url: '/api/content/{content_id}',
        ...options
    });
};

export const listConversations = <ThrowOnError extends boolean = true>(options?: Options<ListConversationsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ListConversationsResponses, ListConversationsErrors, ThrowOnError>({
        responseType: 'json',
        url: '/api/conversations',
        ...options
    });
};

export const createConversation = <ThrowOnError extends boolean = true>(options: Options<CreateConversationData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateConversationResponses, CreateConversationErrors, ThrowOnError>({
        responseType: 'json',
        url: '/api/conversations',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const updateConversation = <ThrowOnError extends boolean = true>(options: Options<UpdateConversationData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<UpdateConversationResponses, UpdateConversationErrors, ThrowOnError>({
        responseType: 'json',
        url: '/api/conversations/{conversation_id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const getConversation = <ThrowOnError extends boolean = true>(options: Options<GetConversationData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetConversationResponses, GetConversationErrors, ThrowOnError>({
        responseType: 'json',
        url: '/api/conversations/{id}',
        ...options
    });
};

export const generateResponseSync = <ThrowOnError extends boolean = true>(options: Options<GenerateResponseSyncData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<GenerateResponseSyncResponses, GenerateResponseSyncErrors, ThrowOnError>({
        responseType: 'json',
        url: '/api/conversations/{id}/generate-response',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const getMemories = <ThrowOnError extends boolean = true>(options: Options<GetMemoriesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetMemoriesResponses, GetMemoriesErrors, ThrowOnError>({
        responseType: 'json',
        url: '/api/conversations/{id}/memories',
        ...options
    });
};

export const sendMessage = <ThrowOnError extends boolean = true>(options: Options<SendMessageData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<SendMessageResponses, SendMessageErrors, ThrowOnError>({
        url: '/api/conversations/{id}/messages',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Send a message by finding an existing conversation or creating a new one
 * This endpoint searches for an existing conversation between the specified user and bot.
 * If found, it adds the message to that conversation. If no conversation exists, it creates
 * a new conversation using the provided creation parameters and then adds the message.
 *
 * The conversation lookup is performed using the user_id and bot_id from the conversation_creation_params.
 * When creating a new conversation, the full conversation_creation_params are used, including
 * any initial messages and webhook configuration.
 */
export const sendMessageOrCreateConversation = <ThrowOnError extends boolean = true>(options: Options<SendMessageOrCreateConversationData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<SendMessageOrCreateConversationResponses, SendMessageOrCreateConversationErrors, ThrowOnError>({
        responseType: 'json',
        url: '/api/messages',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const listUsers = <ThrowOnError extends boolean = true>(options?: Options<ListUsersData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ListUsersResponses, ListUsersErrors, ThrowOnError>({
        responseType: 'json',
        url: '/api/users',
        ...options
    });
};

export const createUser = <ThrowOnError extends boolean = true>(options: Options<CreateUserData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateUserResponses, CreateUserErrors, ThrowOnError>({
        responseType: 'json',
        url: '/api/users',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const deleteUser = <ThrowOnError extends boolean = true>(options: Options<DeleteUserData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteUserResponses, DeleteUserErrors, ThrowOnError>({
        url: '/api/users/{user_id}',
        ...options
    });
};

export const getUser = <ThrowOnError extends boolean = true>(options: Options<GetUserData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetUserResponses, GetUserErrors, ThrowOnError>({
        responseType: 'json',
        url: '/api/users/{user_id}',
        ...options
    });
};

export const updateUser = <ThrowOnError extends boolean = true>(options: Options<UpdateUserData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UpdateUserResponses, UpdateUserErrors, ThrowOnError>({
        responseType: 'json',
        url: '/api/users/{user_id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};