// This file is auto-generated by @hey-api/openapi-ts

import { z } from "zod";

export const zApiAttribute = z.object({
  name: z.string(),
  value: z.string(),
});

/**
 * Language enum for client configuration
 */
export const zApiLanguage = z.enum([
  "en",
  "es",
  "fr",
  "de",
  "pt",
  "it",
  "ja",
  "ko",
  "zh",
  "ru",
]);

export const zApiModerationCategory = z.enum([
  "underage_site_use",
  "sexual_minors",
  "beastiality",
  "sexual_violence",
  "prompt_injection",
]);

export const zApiModerationSeverity = z.enum([
  "Low",
  "Medium",
  "High",
  "Critical",
]);

export const zApiModerationInfo = z.object({
  category: zApiModerationCategory,
  reasoning: z.string(),
  severity: zApiModerationSeverity,
});

export const zApiUserWithStats = z.object({
  attributes: z.array(zApiAttribute),
  created_date: z.string().datetime(),
  freeform: z.string(),
  id: z.string(),
  latest_message_time: z.union([z.string().datetime(), z.null()]).optional(),
  message_count: z.coerce.bigint(),
  username: z.string(),
});

export const zContent = z.object({
  content_id: z.union([z.string(), z.null()]).optional(),
  url: z.string().url(),
});

export const zMessage = z.object({
  attached_media: z.union([zContent, z.null()]).optional(),
  from_bot: z.boolean(),
  id: z.union([z.string().uuid(), z.null()]).optional(),
  message_tone: z.union([z.string(), z.null()]).optional(),
  moderation: z.union([zApiModerationInfo, z.null()]).optional(),
  sent_at: z.union([z.coerce.bigint(), z.null()]).optional(),
  text: z.string(),
});

export const zCreateConversationRequest = z.object({
  bot_id: z.string().uuid(),
  create_user_if_not_exists: z.union([z.boolean(), z.null()]).optional(),
  freeform: z.union([z.string(), z.null()]).optional(),
  platform: z.union([z.string(), z.null()]).optional(),
  segment: z.union([z.boolean(), z.null()]).optional(),
  user_id: z.string(),
  webhook: z.union([z.string().url(), z.null()]).optional(),
  with_messages: z.union([z.array(zMessage), z.null()]).optional(),
});

export const zAddMessageRequest = z.object({
  conversation_creation_params: zCreateConversationRequest,
  create_user_if_not_exists: z.boolean().optional(),
  message: zMessage,
});

export const zConversation = z.object({
  bot_id: z.string().uuid(),
  id: z.string(),
  messages: z.array(zMessage),
  user_id: z.union([z.string(), z.null()]).optional(),
});

export const zAddMessageResponse = z.object({
  conversation: zConversation,
  created_conversation: z.boolean(),
});

/**
 * Represents an API key info (without the actual key)
 */
export const zApiKeyInfo = z.object({
  created_at: z.string().datetime(),
  id: z.string().uuid(),
  is_active: z.boolean(),
  key_prefix: z.string(),
  name: z.string(),
});

export const zBot = z.object({
  attributes: z.array(zApiAttribute),
  freeform: z.string(),
  id: z.string().uuid(),
  name: z.string(),
});

/**
 * Client configuration response
 */
export const zClientConfig = z.object({
  chat_images_enabled: z.union([z.boolean(), z.null()]).optional(),
  language: z.union([zApiLanguage, z.null()]).optional(),
  max_delay: z.union([z.number().int(), z.null()]).optional(),
  min_delay: z.union([z.number().int(), z.null()]).optional(),
  platform: z.union([z.string(), z.null()]).optional(),
  segment: z.union([z.boolean(), z.null()]).optional(),
  timezone: z.union([z.string(), z.null()]).optional(),
  typing_speed: z.union([z.number(), z.null()]).optional(),
  webhook: z.union([z.string().url(), z.null()]).optional(),
});

export const zSearchedMessage = z.object({
  from_bot: z.boolean(),
  match_end: z.number().int().gte(0),
  match_start: z.number().int().gte(0),
  message_text: z.string(),
  sent_at: z.coerce.bigint(),
});

export const zConversationHeader = z.object({
  bot_id: z.string().uuid(),
  id: z.string(),
  last_message: z.union([zMessage, z.null()]).optional(),
  message_count: z.number().int().gte(0),
  searched_message: z.union([zSearchedMessage, z.null()]).optional(),
  user_id: z.union([z.string(), z.null()]).optional(),
});

export const zCreateApiKeyRequest = z.object({
  name: z.string(),
});

export const zCreateApiKeyResponse = z.object({
  api_key: z.string(),
  key_info: zApiKeyInfo,
});

export const zCreateBotRequestBody = z.object({
  attributes: z.array(zApiAttribute).optional(),
  freeform: z.union([z.string(), z.null()]).optional(),
  name: z.string(),
});

export const zCreateBotResponse = z.object({
  bot: zBot,
});

export const zCreateConversationResponse = z.object({
  conversation: zConversation,
});

export const zCreateUserRequestBody = z.object({
  attributes: z.array(zApiAttribute).optional(),
  freeform: z.union([z.string(), z.null()]).optional(),
  id: z.string(),
  username: z.string(),
});

export const zUser = z.object({
  attributes: z.array(zApiAttribute),
  freeform: z.string(),
  id: z.string(),
  username: z.string(),
});

export const zCreateUserResponse = z.object({
  user: zUser,
});

export const zDeactivateApiKeyResponse = z.object({
  message: z.string(),
});

export const zDeleteContentResponse = z.object({
  message: z.string(),
});

export const zGetBotResponse = z.object({
  bot: zBot,
});

export const zGetClientConfigResponse = z.object({
  config: zClientConfig,
});

export const zSummary = z.object({
  created_at: z.coerce.bigint(),
  message_count: z.number().int().gte(0),
  summary_text: z.string(),
});

export const zGetConversationResponse = z.object({
  bot_id: z.string().uuid(),
  freeform: z.union([z.string(), z.null()]).optional(),
  latest_summary: z.union([zSummary, z.null()]).optional(),
  messages: z.array(zMessage),
  platform: z.union([z.string(), z.null()]).optional(),
  segment: z.union([z.boolean(), z.null()]).optional(),
  user_id: z.union([z.string(), z.null()]).optional(),
  webhook: z.union([z.string(), z.null()]).optional(),
});

export const zMemoryResponse = z.object({
  text: z.string(),
});

export const zGetMemoriesResponse = z.object({
  bot_memories: z.array(zMemoryResponse),
  user_memories: z.array(zMemoryResponse),
});

export const zGetUserResponse = z.object({
  user: zUser,
});

export const zListApiKeysResponse = z.object({
  api_keys: z.array(zApiKeyInfo),
});

export const zListBotsResponse = z.object({
  bots: z.array(zBot),
});

export const zMediaTypeFilter = z.enum(["image", "video"]);

export const zListContentQuery = z.object({
  bot_id: z.string().uuid(),
  limit: z.union([z.number().int().gte(0), z.null()]).optional(),
  media_type: z.union([zMediaTypeFilter, z.null()]).optional(),
  search: z.union([z.string(), z.null()]).optional(),
});

export const zListContentResponse = z.object({
  content: z.array(zContent),
});

export const zListConversationsResponse = z.object({
  conversations: z.array(zConversationHeader),
});

export const zListUsersResponse = z.object({
  has_more: z.boolean(),
  limit: z.coerce.bigint(),
  offset: z.coerce.bigint(),
  total_count: z.coerce.bigint(),
  users: z.array(zApiUserWithStats),
});

export const zSendMessageRequest = z.object({
  message: zMessage,
});

export const zUpdateBotRequest = z.object({
  attributes: z.array(zApiAttribute).optional(),
  freeform: z.union([z.string(), z.null()]).optional(),
  name: z.union([z.string(), z.null()]).optional(),
});

export const zUpdateBotResponse = z.object({
  bot: zBot,
});

/**
 * Request to update client configuration (all fields optional for PATCH semantics)
 */
export const zUpdateClientConfigRequest = z.object({
  chat_images_enabled: z.union([z.boolean(), z.null()]).optional(),
  language: z.union([zApiLanguage, z.null()]).optional(),
  max_delay: z.union([z.number().int(), z.null()]).optional(),
  min_delay: z.union([z.number().int(), z.null()]).optional(),
  platform: z.union([z.string(), z.null()]).optional(),
  segment: z.union([z.boolean(), z.null()]).optional(),
  timezone: z.union([z.string(), z.null()]).optional(),
  typing_speed: z.union([z.number(), z.null()]).optional(),
  webhook: z.union([z.string().url(), z.null()]).optional(),
});

export const zUpdateClientConfigResponse = z.object({
  config: zClientConfig,
});

export const zUpdateConversationRequestBody = z.object({
  freeform: z.union([z.string(), z.null()]).optional(),
  platform: z.union([z.string(), z.null()]).optional(),
  segment: z.union([z.boolean(), z.null()]).optional(),
  webhook: z.union([z.string().url(), z.null()]).optional(),
});

export const zUpdateConversationResponse = z.object({
  success: z.boolean(),
});

export const zUpdateUserRequest = z.object({
  attributes: z.array(zApiAttribute).optional(),
  freeform: z.union([z.string(), z.null()]).optional(),
  username: z.union([z.string(), z.null()]).optional(),
});

export const zUpdateUserResponse = z.object({
  user: zUser,
});

export const zUploadContentRequest = z.object({
  bot_id: z.string().uuid(),
  image_url: z.string(),
});

export const zUploadContentResponse = z.object({
  content: zContent,
});

export const zListApiKeysData = z.object({
  body: z.never().optional(),
  path: z.never().optional(),
  query: z.never().optional(),
});

/**
 * API keys retrieved successfully
 */
export const zListApiKeysResponse2 = zListApiKeysResponse;

export const zCreateApiKeyData = z.object({
  body: zCreateApiKeyRequest,
  path: z.never().optional(),
  query: z.never().optional(),
});

/**
 * API key created successfully
 */
export const zCreateApiKeyResponse2 = zCreateApiKeyResponse;

export const zDeactivateApiKeyData = z.object({
  body: z.never().optional(),
  path: z.object({
    key_id: z.string(),
  }),
  query: z.never().optional(),
});

/**
 * API key deactivated successfully
 */
export const zDeactivateApiKeyResponse2 = zDeactivateApiKeyResponse;

export const zListBotsData = z.object({
  body: z.never().optional(),
  path: z.never().optional(),
  query: z.never().optional(),
});

/**
 * Bots retrieved successfully
 */
export const zListBotsResponse2 = zListBotsResponse;

export const zCreateBotData = z.object({
  body: zCreateBotRequestBody,
  path: z.never().optional(),
  query: z.never().optional(),
});

/**
 * Bot created successfully
 */
export const zCreateBotResponse2 = zCreateBotResponse;

export const zDeleteBotData = z.object({
  body: z.never().optional(),
  path: z.object({
    bot_id: z.string().uuid(),
  }),
  query: z.never().optional(),
});

/**
 * Bot deleted successfully
 */
export const zDeleteBotResponse = z.void();

export const zGetBotData = z.object({
  body: z.never().optional(),
  path: z.object({
    bot_id: z.string().uuid(),
  }),
  query: z.never().optional(),
});

/**
 * Bot retrieved successfully
 */
export const zGetBotResponse2 = zGetBotResponse;

export const zUpdateBotData = z.object({
  body: zUpdateBotRequest,
  path: z.object({
    bot_id: z.string().uuid(),
  }),
  query: z.never().optional(),
});

/**
 * Bot updated successfully
 */
export const zUpdateBotResponse2 = zUpdateBotResponse;

export const zGetClientConfigData = z.object({
  body: z.never().optional(),
  path: z.never().optional(),
  query: z.never().optional(),
});

/**
 * Client configuration retrieved successfully
 */
export const zGetClientConfigResponse2 = zGetClientConfigResponse;

export const zUpdateClientConfigData = z.object({
  body: zUpdateClientConfigRequest,
  path: z.never().optional(),
  query: z.never().optional(),
});

/**
 * Client configuration updated successfully
 */
export const zUpdateClientConfigResponse2 = zUpdateClientConfigResponse;

export const zListContentData = z.object({
  body: z.never().optional(),
  path: z.never().optional(),
  query: z.object({
    bot_id: z.string(),
    limit: z.union([z.number().int().gte(0), z.null()]).optional(),
    search: z.union([z.string(), z.null()]).optional(),
    media_type: z.union([zMediaTypeFilter, z.null()]).optional(),
  }),
});

/**
 * Content list retrieved successfully
 */
export const zListContentResponse2 = zListContentResponse;

export const zUploadContentData = z.object({
  body: zUploadContentRequest,
  path: z.never().optional(),
  query: z.never().optional(),
});

/**
 * Content uploaded successfully
 */
export const zUploadContentResponse2 = zUploadContentResponse;

export const zDeleteContentData = z.object({
  body: z.never().optional(),
  path: z.object({
    content_id: z.string(),
  }),
  query: z.never().optional(),
});

/**
 * Content deleted successfully
 */
export const zDeleteContentResponse2 = zDeleteContentResponse;

export const zListConversationsData = z.object({
  body: z.never().optional(),
  path: z.never().optional(),
  query: z
    .object({
      bot_id: z.union([z.string(), z.null()]).optional(),
      user_id: z.union([z.string(), z.null()]).optional(),
      conversation_id: z.union([z.string(), z.null()]).optional(),
      min_messages: z.union([z.number().int(), z.null()]).optional(),
      max_messages: z.union([z.number().int(), z.null()]).optional(),
      message_content: z.union([z.string(), z.null()]).optional(),
      min_last_message_date: z.union([z.number().int(), z.null()]).optional(),
      max_last_message_date: z.union([z.number().int(), z.null()]).optional(),
    })
    .optional(),
});

/**
 * Conversations retrieved successfully
 */
export const zListConversationsResponse2 = zListConversationsResponse;

export const zCreateConversationData = z.object({
  body: zCreateConversationRequest,
  path: z.never().optional(),
  query: z.never().optional(),
});

/**
 * Conversation created successfully
 */
export const zCreateConversationResponse2 = zCreateConversationResponse;

export const zUpdateConversationData = z.object({
  body: zUpdateConversationRequestBody,
  path: z.object({
    conversation_id: z.string(),
  }),
  query: z.never().optional(),
});

/**
 * Conversation updated successfully
 */
export const zUpdateConversationResponse2 = zUpdateConversationResponse;

export const zGetConversationData = z.object({
  body: z.never().optional(),
  path: z.object({
    id: z.string(),
  }),
  query: z.never().optional(),
});

/**
 * Conversation retrieved successfully
 */
export const zGetConversationResponse2 = zGetConversationResponse;

export const zGetMemoriesData = z.object({
  body: z.never().optional(),
  path: z.object({
    id: z.string(),
  }),
  query: z.never().optional(),
});

/**
 * Memories retrieved successfully
 */
export const zGetMemoriesResponse2 = zGetMemoriesResponse;

export const zSendMessageData = z.object({
  body: zSendMessageRequest,
  path: z.object({
    id: z.string(),
  }),
  query: z.never().optional(),
});

export const zSendMessageOrCreateConversationData = z.object({
  body: zAddMessageRequest,
  path: z.never().optional(),
  query: z.never().optional(),
});

/**
 * Message added successfully, conversation found or created
 */
export const zSendMessageOrCreateConversationResponse = zAddMessageResponse;

export const zListUsersData = z.object({
  body: z.never().optional(),
  path: z.never().optional(),
  query: z
    .object({
      limit: z.union([z.coerce.bigint(), z.null()]).optional(),
      offset: z.coerce.bigint().optional(),
      search_id: z.union([z.string(), z.null()]).optional(),
      search_username: z.union([z.string(), z.null()]).optional(),
      sort_by: z.string().optional(),
      sort_desc: z.boolean().optional(),
    })
    .optional(),
});

/**
 * Users retrieved successfully
 */
export const zListUsersResponse2 = zListUsersResponse;

export const zCreateUserData = z.object({
  body: zCreateUserRequestBody,
  path: z.never().optional(),
  query: z.never().optional(),
});

/**
 * User created successfully
 */
export const zCreateUserResponse2 = zCreateUserResponse;

export const zDeleteUserData = z.object({
  body: z.never().optional(),
  path: z.object({
    user_id: z.string(),
  }),
  query: z.never().optional(),
});

/**
 * User deleted successfully
 */
export const zDeleteUserResponse = z.void();

export const zGetUserData = z.object({
  body: z.never().optional(),
  path: z.object({
    user_id: z.string(),
  }),
  query: z.never().optional(),
});

/**
 * User retrieved successfully
 */
export const zGetUserResponse2 = zGetUserResponse;

export const zUpdateUserData = z.object({
  body: zUpdateUserRequest,
  path: z.object({
    user_id: z.string(),
  }),
  query: z.never().optional(),
});

/**
 * User updated successfully
 */
export const zUpdateUserResponse2 = zUpdateUserResponse;
