// This file is auto-generated by @hey-api/openapi-ts

export type Bot = {
  /**
   * Unique identifier for the bot
   */
  id: string;
  /**
   * Name of the bot
   */
  name: string;
};

export type Content = {
  /**
   * Unique identifier for the content
   */
  content_id: string;
  /**
   * URL to the attached media
   */
  url: string;
};

export type Conversation = {
  /**
   * ID of the bot associated with this conversation
   */
  bot_id: string;
  /**
   * The unique ID of the conversation
   */
  id: string;
  /**
   * Messages in the conversation
   */
  messages: Array<Message>;
  /**
   * ID of the user associated with this conversation
   */
  user_id?: string | null;
};

export type ConversationHeader = {
  /**
   * ID of the bot associated with this conversation
   */
  bot_id: string;
  /**
   * Unique identifier for the conversation
   */
  id: string;
  last_message?: Message | null;
  /**
   * Total number of messages in this conversation
   */
  message_count: number;
  /**
   * ID of the user associated with this conversation
   */
  user_id: string;
};

export type CreateBotRequest = {
  /**
   * Name of the bot
   */
  name: string;
};

export type CreateBotResponse = {
  bot: Bot;
};

export type CreateConversationRequest = {
  /**
   * ID of the bot to associate with this conversation
   */
  bot_id: string;
  /**
   * Whether to create the user if they don't exist. Defaults to true for seamless user onboarding
   */
  create_user_if_not_exists?: boolean | null;
  /**
   * ID of the user to associate with this conversation. Use whatever user ID format you use in your system
   */
  user_id: string;
  /**
   * Optional list of initial messages for the conversation
   */
  with_messages?: Array<Message> | null;
};

export type CreateConversationResponse = {
  conversation: Conversation;
};

export type GetBotResponse = {
  bot: Bot;
};

export type GetConversationResponse = {
  /**
   * ID of the bot associated with this conversation
   */
  bot_id: string;
  /**
   * Messages in the conversation
   */
  messages: Array<Message>;
  /**
   * ID of the user associated with this conversation
   */
  user_id: string;
};

export type GetMemoriesResponse = {
  /**
   * Bot memories for this conversation
   */
  bot_memories: Array<MemoryResponse>;
  /**
   * User memories for this conversation
   */
  user_memories: Array<MemoryResponse>;
};

export type ListBotsResponse = {
  /**
   * List of all bots
   */
  bots: Array<Bot>;
};

export type ListConversationsResponse = {
  /**
   * List of conversations
   */
  conversations: Array<ConversationHeader>;
};

export type MemoryResponse = {
  /**
   * Text content of the memory
   */
  text: string;
};

export type Message = {
  attached_media?: Content | null;
  /**
   * Whether this message is from a bot (true) or human (false)
   */
  from_bot: boolean;
  /**
   * Unique identifier for the content
   */
  id?: string | null;
  /**
   * Unix timestamp when the message was sent
   */
  sent_at?: number | null;
  /**
   * The text content of the message
   */
  text: string;
};

export type SendMessageRequest = {
  message: Message;
};

export type UpdateBotRequest = {
  /**
   * New name of the bot
   */
  name: string;
};

export type UpdateBotResponse = {
  bot: Bot;
};

export type ListBotsData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/api/bots";
};

export type ListBotsErrors = {
  /**
   * Internal server error
   */
  500: unknown;
};

export type ListBotsResponses = {
  /**
   * Bots retrieved successfully
   */
  200: ListBotsResponse;
};

export type ListBotsResponse2 = ListBotsResponses[keyof ListBotsResponses];

export type CreateBotData = {
  body: CreateBotRequest;
  path?: never;
  query?: never;
  url: "/api/bots";
};

export type CreateBotErrors = {
  /**
   * Internal server error
   */
  500: unknown;
};

export type CreateBotResponses = {
  /**
   * Bot created successfully
   */
  200: CreateBotResponse;
};

export type CreateBotResponse2 = CreateBotResponses[keyof CreateBotResponses];

export type DeleteBotData = {
  body?: never;
  path: {
    /**
     * Bot identifier
     */
    bot_id: string;
  };
  query?: never;
  url: "/api/bots/{bot_id}";
};

export type DeleteBotErrors = {
  /**
   * Bot not found
   */
  404: unknown;
  /**
   * Internal server error
   */
  500: unknown;
};

export type DeleteBotResponses = {
  /**
   * Bot deleted successfully
   */
  204: void;
};

export type DeleteBotResponse = DeleteBotResponses[keyof DeleteBotResponses];

export type GetBotData = {
  body?: never;
  path: {
    /**
     * Bot identifier
     */
    bot_id: string;
  };
  query?: never;
  url: "/api/bots/{bot_id}";
};

export type GetBotErrors = {
  /**
   * Bot not found
   */
  404: unknown;
  /**
   * Internal server error
   */
  500: unknown;
};

export type GetBotResponses = {
  /**
   * Bot retrieved successfully
   */
  200: GetBotResponse;
};

export type GetBotResponse2 = GetBotResponses[keyof GetBotResponses];

export type UpdateBotData = {
  body: UpdateBotRequest;
  path: {
    /**
     * Bot identifier
     */
    bot_id: string;
  };
  query?: never;
  url: "/api/bots/{bot_id}";
};

export type UpdateBotErrors = {
  /**
   * Bot not found
   */
  404: unknown;
  /**
   * Internal server error
   */
  500: unknown;
};

export type UpdateBotResponses = {
  /**
   * Bot updated successfully
   */
  200: UpdateBotResponse;
};

export type UpdateBotResponse2 = UpdateBotResponses[keyof UpdateBotResponses];

export type ListConversationsData = {
  body?: never;
  path?: never;
  query?: {
    /**
     * Filter conversations by bot ID
     */
    bot_id?: string | null;
    /**
     * Filter conversations by user ID
     */
    user_id?: string | null;
  };
  url: "/api/conversations";
};

export type ListConversationsErrors = {
  /**
   * Internal server error
   */
  500: unknown;
};

export type ListConversationsResponses = {
  /**
   * Conversations retrieved successfully
   */
  200: ListConversationsResponse;
};

export type ListConversationsResponse2 =
  ListConversationsResponses[keyof ListConversationsResponses];

export type CreateConversationData = {
  body: CreateConversationRequest;
  path?: never;
  query?: never;
  url: "/api/conversations";
};

export type CreateConversationErrors = {
  /**
   * Internal server error
   */
  500: unknown;
};

export type CreateConversationResponses = {
  /**
   * Conversation created successfully
   */
  200: CreateConversationResponse;
};

export type CreateConversationResponse2 =
  CreateConversationResponses[keyof CreateConversationResponses];

export type GetConversationData = {
  body?: never;
  path: {
    /**
     * Conversation ID
     */
    id: string;
  };
  query?: never;
  url: "/api/conversations/{id}";
};

export type GetConversationErrors = {
  /**
   * Internal server error
   */
  500: unknown;
};

export type GetConversationResponses = {
  /**
   * Conversation retrieved successfully
   */
  200: GetConversationResponse;
};

export type GetConversationResponse2 =
  GetConversationResponses[keyof GetConversationResponses];

export type GetMemoriesData = {
  body?: never;
  path: {
    /**
     * Conversation ID
     */
    id: string;
  };
  query?: never;
  url: "/api/conversations/{id}/memories";
};

export type GetMemoriesErrors = {
  /**
   * Conversation not found
   */
  404: unknown;
  /**
   * Internal server error
   */
  500: unknown;
};

export type GetMemoriesResponses = {
  /**
   * Memories retrieved successfully
   */
  200: GetMemoriesResponse;
};

export type GetMemoriesResponse2 =
  GetMemoriesResponses[keyof GetMemoriesResponses];

export type SendMessageData = {
  body: SendMessageRequest;
  path: {
    /**
     * Conversation ID
     */
    id: string;
  };
  query?: never;
  url: "/api/conversations/{id}/messages";
};

export type SendMessageErrors = {
  /**
   * Internal server error
   */
  500: unknown;
};

export type SendMessageResponses = {
  /**
   * Message sent successfully
   */
  202: unknown;
};

export type ClientOptions = {
  baseURL: `${string}://${string}` | (string & {});
};
