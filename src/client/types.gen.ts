// This file is auto-generated by @hey-api/openapi-ts

export type ApiModerationCategory =
  | "underage_site_use"
  | "sexual_minors"
  | "beastiality"
  | "sexual_violence"
  | "prompt_injection";

export type ApiModerationInfo = {
  category: ApiModerationCategory;
  /**
   * Explanation of why this message was flagged
   */
  reasoning: string;
  severity: ApiModerationSeverity;
};

export type ApiModerationSeverity = "Low" | "Medium" | "High" | "Critical";

/**
 * Represents an API key info (without the actual key)
 */
export type ApiKeyInfo = {
  created_at: string;
  id: string;
  is_active: boolean;
  key_prefix: string;
  name: string;
};

export type Bot = {
  /**
   * Unique identifier for the bot
   */
  id: string;
  /**
   * Name of the bot
   */
  name: string;
};

export type Content = {
  /**
   * Unique identifier for the content
   */
  content_id?: string | null;
  /**
   * URL to the attached media
   */
  url: string;
};

export type Conversation = {
  /**
   * ID of the bot associated with this conversation
   */
  bot_id: string;
  /**
   * The unique ID of the conversation
   */
  id: string;
  /**
   * Messages in the conversation
   */
  messages: Array<Message>;
  /**
   * ID of the user associated with this conversation
   */
  user_id?: string | null;
};

export type ConversationHeader = {
  /**
   * ID of the bot associated with this conversation
   */
  bot_id: string;
  /**
   * Unique identifier for the conversation
   */
  id: string;
  last_message?: Message | null;
  /**
   * Total number of messages in this conversation
   */
  message_count: number;
  searched_message?: SearchedMessage | null;
  /**
   * ID of the user associated with this conversation
   */
  user_id?: string | null;
};

export type CreateApiKeyRequest = {
  /**
   * Name/description for the API key
   */
  name: string;
};

export type CreateApiKeyResponse = {
  /**
   * The generated API key (only shown once)
   */
  api_key: string;
  key_info: ApiKeyInfo;
};

export type CreateBotRequest = {
  /**
   * Name of the bot
   */
  name: string;
};

export type CreateBotResponse = {
  bot: Bot;
};

export type CreateConversationRequest = {
  /**
   * ID of the bot to associate with this conversation
   */
  bot_id: string;
  /**
   * Whether to create the user if they don't exist. Defaults to true for seamless user onboarding
   */
  create_user_if_not_exists?: boolean | null;
  /**
   * ID of the user to associate with this conversation. Use whatever user ID format you use in your system
   */
  user_id: string;
  /**
   * Optional list of initial messages for the conversation
   */
  with_messages?: Array<Message> | null;
};

export type CreateConversationResponse = {
  conversation: Conversation;
};

export type DeactivateApiKeyResponse = {
  /**
   * Success message
   */
  message: string;
};

export type DeleteContentResponse = {
  /**
   * Success message
   */
  message: string;
};

export type GetBotResponse = {
  bot: Bot;
};

export type GetConversationResponse = {
  /**
   * ID of the bot associated with this conversation
   */
  bot_id: string;
  /**
   * Messages in the conversation
   */
  messages: Array<Message>;
  /**
   * ID of the user associated with this conversation
   */
  user_id?: string | null;
};

export type GetMemoriesResponse = {
  /**
   * Bot memories for this conversation
   */
  bot_memories: Array<MemoryResponse>;
  /**
   * User memories for this conversation
   */
  user_memories: Array<MemoryResponse>;
};

export type ListApiKeysResponse = {
  /**
   * List of API keys for the client
   */
  api_keys: Array<ApiKeyInfo>;
};

export type ListBotsResponse = {
  /**
   * List of all bots
   */
  bots: Array<Bot>;
};

export type ListContentQuery = {
  /**
   * ID of the bot to list content for
   */
  bot_id: string;
  /**
   * Maximum number of content items to return (default: 30, max: 30)
   */
  limit?: number | null;
  media_type?: MediaTypeFilter | null;
  /**
   * Search query for semantic content search
   */
  search?: string | null;
};

export type ListContentResponse = {
  /**
   * List of content items
   */
  content: Array<Content>;
};

export type ListConversationsResponse = {
  /**
   * List of conversations
   */
  conversations: Array<ConversationHeader>;
};

export type MediaTypeFilter = "image" | "video";

export type MemoryResponse = {
  /**
   * Text content of the memory
   */
  text: string;
};

export type Message = {
  attached_media?: Content | null;
  /**
   * Whether this message is from a bot (true) or human (false)
   */
  from_bot: boolean;
  /**
   * Unique identifier for the content
   */
  id?: string | null;
  /**
   * What tone was used to generate the message (useful only for debug or display in admin
   * panel. Does nothing as input parameter, only output)
   */
  message_tone?: string | null;
  moderation?: ApiModerationInfo | null;
  /**
   * Unix timestamp when the message was sent
   */
  sent_at?: number | null;
  /**
   * The text content of the message
   */
  text: string;
};

export type SearchedMessage = {
  /**
   * Whether this message was sent by the bot
   */
  from_bot: boolean;
  /**
   * End index of the match within the message text
   */
  match_end: number;
  /**
   * Start index of the match within the message text
   */
  match_start: number;
  /**
   * The text content of the matched message
   */
  message_text: string;
  /**
   * Unix timestamp when the message was sent
   */
  sent_at: number;
};

export type SendMessageRequest = {
  message: Message;
};

export type UpdateBotRequest = {
  /**
   * New name of the bot
   */
  name: string;
};

export type UpdateBotResponse = {
  bot: Bot;
};

export type UploadContentRequest = {
  /**
   * ID of the bot this content belongs to
   */
  bot_id: string;
  /**
   * URL of the image to upload (can be a remote URL like https://example.com/image.jpg or a data URL like data:image/jpeg;base64,...)
   */
  image_url: string;
};

export type UploadContentResponse = {
  content: Content;
};

export type ListApiKeysData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/api/api-keys";
};

export type ListApiKeysErrors = {
  /**
   * Unauthorized
   */
  401: unknown;
  /**
   * Internal server error
   */
  500: unknown;
};

export type ListApiKeysResponses = {
  /**
   * API keys retrieved successfully
   */
  200: ListApiKeysResponse;
};

export type ListApiKeysResponse2 =
  ListApiKeysResponses[keyof ListApiKeysResponses];

export type CreateApiKeyData = {
  body: CreateApiKeyRequest;
  path?: never;
  query?: never;
  url: "/api/api-keys";
};

export type CreateApiKeyErrors = {
  /**
   * Invalid request
   */
  400: unknown;
  /**
   * Unauthorized
   */
  401: unknown;
  /**
   * Internal server error
   */
  500: unknown;
};

export type CreateApiKeyResponses = {
  /**
   * API key created successfully
   */
  200: CreateApiKeyResponse;
};

export type CreateApiKeyResponse2 =
  CreateApiKeyResponses[keyof CreateApiKeyResponses];

export type DeactivateApiKeyData = {
  body?: never;
  path: {
    /**
     * API key ID to deactivate
     */
    key_id: string;
  };
  query?: never;
  url: "/api/api-keys/{key_id}";
};

export type DeactivateApiKeyErrors = {
  /**
   * Invalid key ID
   */
  400: unknown;
  /**
   * Unauthorized
   */
  401: unknown;
  /**
   * API key not found
   */
  404: unknown;
  /**
   * Internal server error
   */
  500: unknown;
};

export type DeactivateApiKeyResponses = {
  /**
   * API key deactivated successfully
   */
  200: DeactivateApiKeyResponse;
};

export type DeactivateApiKeyResponse2 =
  DeactivateApiKeyResponses[keyof DeactivateApiKeyResponses];

export type ListBotsData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/api/bots";
};

export type ListBotsErrors = {
  /**
   * Internal server error
   */
  500: unknown;
};

export type ListBotsResponses = {
  /**
   * Bots retrieved successfully
   */
  200: ListBotsResponse;
};

export type ListBotsResponse2 = ListBotsResponses[keyof ListBotsResponses];

export type CreateBotData = {
  body: CreateBotRequest;
  path?: never;
  query?: never;
  url: "/api/bots";
};

export type CreateBotErrors = {
  /**
   * Internal server error
   */
  500: unknown;
};

export type CreateBotResponses = {
  /**
   * Bot created successfully
   */
  200: CreateBotResponse;
};

export type CreateBotResponse2 = CreateBotResponses[keyof CreateBotResponses];

export type DeleteBotData = {
  body?: never;
  path: {
    /**
     * Bot identifier
     */
    bot_id: string;
  };
  query?: never;
  url: "/api/bots/{bot_id}";
};

export type DeleteBotErrors = {
  /**
   * Bot not found
   */
  404: unknown;
  /**
   * Internal server error
   */
  500: unknown;
};

export type DeleteBotResponses = {
  /**
   * Bot deleted successfully
   */
  204: void;
};

export type DeleteBotResponse = DeleteBotResponses[keyof DeleteBotResponses];

export type GetBotData = {
  body?: never;
  path: {
    /**
     * Bot identifier
     */
    bot_id: string;
  };
  query?: never;
  url: "/api/bots/{bot_id}";
};

export type GetBotErrors = {
  /**
   * Bot not found
   */
  404: unknown;
  /**
   * Internal server error
   */
  500: unknown;
};

export type GetBotResponses = {
  /**
   * Bot retrieved successfully
   */
  200: GetBotResponse;
};

export type GetBotResponse2 = GetBotResponses[keyof GetBotResponses];

export type UpdateBotData = {
  body: UpdateBotRequest;
  path: {
    /**
     * Bot identifier
     */
    bot_id: string;
  };
  query?: never;
  url: "/api/bots/{bot_id}";
};

export type UpdateBotErrors = {
  /**
   * Bot not found
   */
  404: unknown;
  /**
   * Internal server error
   */
  500: unknown;
};

export type UpdateBotResponses = {
  /**
   * Bot updated successfully
   */
  200: UpdateBotResponse;
};

export type UpdateBotResponse2 = UpdateBotResponses[keyof UpdateBotResponses];

export type ListContentData = {
  body?: never;
  path?: never;
  query: {
    /**
     * Bot identifier
     */
    bot_id: string;
    /**
     * Maximum number of items to return (default: 30, max: 30)
     */
    limit?: number | null;
    /**
     * Search query for semantic content search
     */
    search?: string | null;
    /**
     * Media type filter: 'image' or 'video' (defaults to all types if not specified)
     */
    media_type?: MediaTypeFilter | null;
  };
  url: "/api/content";
};

export type ListContentErrors = {
  /**
   * Invalid query parameters
   */
  400: unknown;
  /**
   * Bot not found
   */
  404: unknown;
  /**
   * Internal server error
   */
  500: unknown;
};

export type ListContentResponses = {
  /**
   * Content list retrieved successfully
   */
  200: ListContentResponse;
};

export type ListContentResponse2 =
  ListContentResponses[keyof ListContentResponses];

export type UploadContentData = {
  body: UploadContentRequest;
  path?: never;
  query?: never;
  url: "/api/content";
};

export type UploadContentErrors = {
  /**
   * Invalid request - URL is not an image or bot not found
   */
  400: unknown;
  /**
   * Internal server error
   */
  500: unknown;
};

export type UploadContentResponses = {
  /**
   * Content uploaded successfully
   */
  200: UploadContentResponse;
};

export type UploadContentResponse2 =
  UploadContentResponses[keyof UploadContentResponses];

export type DeleteContentData = {
  body?: never;
  path: {
    /**
     * Content identifier
     */
    content_id: string;
  };
  query?: never;
  url: "/api/content/{content_id}";
};

export type DeleteContentErrors = {
  /**
   * Content not found
   */
  404: unknown;
  /**
   * Internal server error
   */
  500: unknown;
};

export type DeleteContentResponses = {
  /**
   * Content deleted successfully
   */
  200: DeleteContentResponse;
};

export type DeleteContentResponse2 =
  DeleteContentResponses[keyof DeleteContentResponses];

export type ListConversationsData = {
  body?: never;
  path?: never;
  query?: {
    /**
     * Filter conversations by bot ID
     */
    bot_id?: string | null;
    /**
     * Filter conversations by user ID
     */
    user_id?: string | null;
    /**
     * Filter conversations by specific conversation ID
     */
    conversation_id?: string | null;
    /**
     * Filter conversations with at least this many messages
     */
    min_messages?: number | null;
    /**
     * Filter conversations with at most this many messages
     */
    max_messages?: number | null;
    /**
     * Search for conversations containing this text in messages
     */
    message_content?: string | null;
    /**
     * Filter conversations with last message after this timestamp (Unix epoch)
     */
    min_last_message_date?: number | null;
    /**
     * Filter conversations with last message before this timestamp (Unix epoch)
     */
    max_last_message_date?: number | null;
  };
  url: "/api/conversations";
};

export type ListConversationsErrors = {
  /**
   * Internal server error
   */
  500: unknown;
};

export type ListConversationsResponses = {
  /**
   * Conversations retrieved successfully
   */
  200: ListConversationsResponse;
};

export type ListConversationsResponse2 =
  ListConversationsResponses[keyof ListConversationsResponses];

export type CreateConversationData = {
  body: CreateConversationRequest;
  path?: never;
  query?: never;
  url: "/api/conversations";
};

export type CreateConversationErrors = {
  /**
   * Internal server error
   */
  500: unknown;
};

export type CreateConversationResponses = {
  /**
   * Conversation created successfully
   */
  200: CreateConversationResponse;
};

export type CreateConversationResponse2 =
  CreateConversationResponses[keyof CreateConversationResponses];

export type GetConversationData = {
  body?: never;
  path: {
    /**
     * Conversation ID
     */
    id: string;
  };
  query?: never;
  url: "/api/conversations/{id}";
};

export type GetConversationErrors = {
  /**
   * Internal server error
   */
  500: unknown;
};

export type GetConversationResponses = {
  /**
   * Conversation retrieved successfully
   */
  200: GetConversationResponse;
};

export type GetConversationResponse2 =
  GetConversationResponses[keyof GetConversationResponses];

export type GetMemoriesData = {
  body?: never;
  path: {
    /**
     * Conversation ID
     */
    id: string;
  };
  query?: never;
  url: "/api/conversations/{id}/memories";
};

export type GetMemoriesErrors = {
  /**
   * Conversation not found
   */
  404: unknown;
  /**
   * Internal server error
   */
  500: unknown;
};

export type GetMemoriesResponses = {
  /**
   * Memories retrieved successfully
   */
  200: GetMemoriesResponse;
};

export type GetMemoriesResponse2 =
  GetMemoriesResponses[keyof GetMemoriesResponses];

export type SendMessageData = {
  body: SendMessageRequest;
  path: {
    /**
     * Conversation ID
     */
    id: string;
  };
  query?: never;
  url: "/api/conversations/{id}/messages";
};

export type SendMessageErrors = {
  /**
   * Internal server error
   */
  500: unknown;
};

export type SendMessageResponses = {
  /**
   * Message sent successfully
   */
  202: unknown;
};

export type ClientOptions = {
  baseURL: `${string}://${string}` | (string & {});
};
