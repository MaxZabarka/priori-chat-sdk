// This file is auto-generated by @hey-api/openapi-ts

export type ApiAttribute = {
    /**
     * Name of the attribute
     */
    name: string;
    /**
     * Value of the attribute
     */
    value: string;
};

/**
 * Language enum for client configuration
 */
export type ApiLanguage = 'en' | 'es' | 'fr' | 'de' | 'pt' | 'it' | 'ja' | 'ko' | 'zh' | 'ru';

export type ApiModerationCategory = 'underage_site_use' | 'sexual_minors' | 'beastiality' | 'sexual_violence' | 'prompt_injection';

export type ApiModerationInfo = {
    category: ApiModerationCategory;
    /**
     * Explanation of why this message was flagged
     */
    reasoning: string;
    severity: ApiModerationSeverity;
};

export type ApiModerationSeverity = 'Low' | 'Medium' | 'High' | 'Critical';

export type ApiUserWithStats = {
    /**
     * List of user attributes
     */
    attributes: Array<ApiAttribute>;
    /**
     * Date when the user was created
     */
    created_date: string;
    /**
     * Freeform text description
     */
    freeform: string;
    /**
     * Unique identifier for the user
     */
    id: string;
    /**
     * Timestamp of the user's latest message (null if no messages)
     */
    latest_message_time?: string | null;
    /**
     * Total number of messages sent by this user
     */
    message_count: number;
    /**
     * Username of the user
     */
    username: string;
};

export type AddMessageRequest = {
    conversation_creation_params: CreateConversationRequest;
    /**
     * Whether to create the user if they don't exist. Defaults to false
     */
    create_user_if_not_exists?: boolean;
    message: Message;
};

export type AddMessageResponse = {
    conversation: Conversation;
    /**
     * Whether a new conversation was created as part of this request
     */
    created_conversation: boolean;
};

/**
 * Represents an API key info (without the actual key)
 */
export type ApiKeyInfo = {
    created_at: string;
    id: string;
    is_active: boolean;
    key_prefix: string;
    name: string;
};

export type Bot = {
    /**
     * List of bot attributes
     */
    attributes: Array<ApiAttribute>;
    /**
     * Freeform text description
     */
    freeform: string;
    /**
     * Unique identifier for the bot
     */
    id: string;
    /**
     * Name of the bot
     */
    name: string;
};

/**
 * Client configuration response
 */
export type ClientConfig = {
    chat_images_enabled?: boolean | null;
    language?: ApiLanguage | null;
    max_delay?: number | null;
    min_delay?: number | null;
    platform?: string | null;
    segment?: boolean | null;
    timezone?: string | null;
    typing_speed?: number | null;
    webhook?: string | null;
};

export type Content = {
    /**
     * Unique identifier for the content
     */
    content_id?: string | null;
    /**
     * URL to the attached media
     */
    url: string;
};

export type Conversation = {
    /**
     * ID of the bot associated with this conversation
     */
    bot_id: string;
    /**
     * The unique ID of the conversation
     */
    id: string;
    /**
     * Messages in the conversation
     */
    messages: Array<Message>;
    /**
     * ID of the user associated with this conversation
     */
    user_id?: string | null;
};

export type ConversationHeader = {
    /**
     * ID of the bot associated with this conversation
     */
    bot_id: string;
    /**
     * Unique identifier for the conversation
     */
    id: string;
    last_message?: Message | null;
    /**
     * Total number of messages in this conversation
     */
    message_count: number;
    searched_message?: SearchedMessage | null;
    /**
     * ID of the user associated with this conversation
     */
    user_id?: string | null;
};

export type CreateApiKeyRequest = {
    /**
     * Name/description for the API key
     */
    name: string;
};

export type CreateApiKeyResponse = {
    /**
     * The generated API key (only shown once)
     */
    api_key: string;
    key_info: ApiKeyInfo;
};

export type CreateBotRequestBody = {
    /**
     * List of bot attributes
     */
    attributes?: Array<ApiAttribute>;
    /**
     * Freeform text description
     */
    freeform?: string | null;
    /**
     * Name of the bot
     */
    name: string;
};

export type CreateBotResponse = {
    bot: Bot;
};

export type CreateConversationRequest = {
    /**
     * ID of the bot to associate with this conversation
     */
    bot_id: string;
    /**
     * Whether to create the user if they don't exist. Defaults to true for seamless user onboarding
     */
    create_user_if_not_exists?: boolean | null;
    /**
     * Optional freeform text to add to the prompt
     */
    freeform?: string | null;
    /**
     * Optional platform name describing which site the user and bot are chatting on
     */
    platform?: string | null;
    /**
     * Whether to have the bot capable of responding in multiple messages (more realistic)
     */
    segment?: boolean | null;
    /**
     * ID of the user to associate with this conversation. Use whatever user ID format you use in your system
     */
    user_id: string;
    /**
     * Optional webhook URL to call when messages are received in this conversation
     */
    webhook?: string | null;
    /**
     * Optional list of initial messages for the conversation
     */
    with_messages?: Array<Message> | null;
};

export type CreateConversationResponse = {
    conversation: Conversation;
};

export type CreateUserRequestBody = {
    /**
     * List of user attributes
     */
    attributes?: Array<ApiAttribute>;
    /**
     * Freeform text description
     */
    freeform?: string | null;
    /**
     * Unique ID for the user
     */
    id: string;
    /**
     * Username of the user
     */
    username: string;
};

export type CreateUserResponse = {
    user: User;
};

export type DeactivateApiKeyResponse = {
    /**
     * Success message
     */
    message: string;
};

export type DeleteContentResponse = {
    /**
     * Success message
     */
    message: string;
};

export type GenerateResponseSyncRequest = {
    batch_size?: number;
};

export type GenerateResponseSyncResponse = {
    candidates: Array<ResponseCandidate>;
};

export type GetBotResponse = {
    bot: Bot;
};

export type GetClientConfigResponse = {
    config: ClientConfig;
};

export type GetConversationResponse = {
    /**
     * ID of the bot associated with this conversation
     */
    bot_id: string;
    /**
     * Optional freeform text to add to the prompt
     */
    freeform?: string | null;
    latest_summary?: Summary | null;
    /**
     * Messages in the conversation
     */
    messages: Array<Message>;
    /**
     * Optional platform name describing which site the user and bot are chatting on
     */
    platform?: string | null;
    /**
     * Whether to have the bot capable of responding in multiple messages (more realistic)
     */
    segment?: boolean | null;
    /**
     * ID of the user associated with this conversation
     */
    user_id?: string | null;
    /**
     * Optional webhook URL to call when messages are received in this conversation
     */
    webhook?: string | null;
};

export type GetMemoriesResponse = {
    /**
     * Bot memories for this conversation
     */
    bot_memories: Array<MemoryResponse>;
    /**
     * User memories for this conversation
     */
    user_memories: Array<MemoryResponse>;
};

export type GetUserResponse = {
    user: User;
};

export type ListApiKeysResponse = {
    /**
     * List of API keys for the client
     */
    api_keys: Array<ApiKeyInfo>;
};

export type ListBotsResponse = {
    /**
     * List of all bots
     */
    bots: Array<Bot>;
};

export type ListContentQuery = {
    /**
     * ID of the bot to list content for
     */
    bot_id: string;
    /**
     * Maximum number of content items to return (default: 30, max: 30)
     */
    limit?: number | null;
    media_type?: MediaTypeFilter | null;
    /**
     * Search query for semantic content search
     */
    search?: string | null;
};

export type ListContentResponse = {
    /**
     * List of content items
     */
    content: Array<Content>;
};

export type ListConversationsResponse = {
    /**
     * List of conversations
     */
    conversations: Array<ConversationHeader>;
};

export type ListUsersResponse = {
    /**
     * Whether there are more users available
     */
    has_more: boolean;
    /**
     * Current limit
     */
    limit: number;
    /**
     * Current offset
     */
    offset: number;
    /**
     * Total number of users matching the filter
     */
    total_count: number;
    /**
     * List of users
     */
    users: Array<ApiUserWithStats>;
};

export type MediaTypeFilter = 'image' | 'video';

export type MemoryResponse = {
    /**
     * Text content of the memory
     */
    text: string;
};

export type Message = {
    attached_media?: Content | null;
    /**
     * Whether this message is from a bot (true) or human (false)
     */
    from_bot: boolean;
    /**
     * Unique identifier for the content
     */
    id?: string | null;
    /**
     * What tone was used to generate the message (useful only for debug or display in admin
     * panel. Does nothing as input parameter, only output)
     */
    message_tone?: string | null;
    moderation?: ApiModerationInfo | null;
    /**
     * Unix timestamp when the message was sent
     */
    sent_at?: number | null;
    /**
     * The text content of the message
     */
    text: string;
};

export type ResponseCandidate = {
    messages: Array<Message>;
};

export type SearchedMessage = {
    /**
     * Whether this message was sent by the bot
     */
    from_bot: boolean;
    /**
     * End index of the match within the message text
     */
    match_end: number;
    /**
     * Start index of the match within the message text
     */
    match_start: number;
    /**
     * The text content of the matched message
     */
    message_text: string;
    /**
     * Unix timestamp when the message was sent
     */
    sent_at: number;
};

export type SendMessageRequest = {
    message: Message;
};

export type Summary = {
    /**
     * Unix timestamp when the summary was created
     */
    created_at: number;
    /**
     * Number of messages that were summarized
     */
    message_count: number;
    /**
     * The text summary of the conversation
     */
    summary_text: string;
};

export type UpdateBotRequest = {
    /**
     * List of bot attributes
     */
    attributes?: Array<ApiAttribute>;
    /**
     * Freeform text description
     */
    freeform?: string | null;
    /**
     * Name of the bot
     */
    name?: string | null;
};

export type UpdateBotResponse = {
    bot: Bot;
};

/**
 * Request to update client configuration (all fields optional for PATCH semantics)
 */
export type UpdateClientConfigRequest = {
    chat_images_enabled?: boolean | null;
    language?: ApiLanguage | null;
    max_delay?: number | null;
    min_delay?: number | null;
    platform?: string | null;
    segment?: boolean | null;
    timezone?: string | null;
    typing_speed?: number | null;
    webhook?: string | null;
};

export type UpdateClientConfigResponse = {
    config: ClientConfig;
};

export type UpdateConversationRequestBody = {
    /**
     * Optional freeform text to add to the prompt
     */
    freeform?: string | null;
    /**
     * Optional platform name describing which site the user and bot are chatting on
     */
    platform?: string | null;
    /**
     * Whether to have the bot capable of responding in multiple messages (more realistic)
     */
    segment?: boolean | null;
    /**
     * Optional webhook URL to call when messages are received in this conversation
     */
    webhook?: string | null;
};

export type UpdateConversationResponse = {
    success: boolean;
};

export type UpdateUserRequest = {
    /**
     * List of user attributes
     */
    attributes?: Array<ApiAttribute>;
    /**
     * Freeform text description
     */
    freeform?: string | null;
    /**
     * Username of the user
     */
    username?: string | null;
};

export type UpdateUserResponse = {
    user: User;
};

export type UploadContentRequest = {
    /**
     * ID of the bot this content belongs to
     */
    bot_id: string;
    /**
     * URL of the image to upload (can be a remote URL like https://example.com/image.jpg or a data URL like data:image/jpeg;base64,...)
     */
    image_url: string;
};

export type UploadContentResponse = {
    content: Content;
};

export type User = {
    /**
     * List of user attributes
     */
    attributes: Array<ApiAttribute>;
    /**
     * Freeform text description
     */
    freeform: string;
    /**
     * Unique identifier for the user
     */
    id: string;
    /**
     * Username of the user
     */
    username: string;
};

export type ListApiKeysData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/api-keys';
};

export type ListApiKeysErrors = {
    /**
     * Unauthorized
     */
    401: unknown;
    /**
     * Internal server error
     */
    500: unknown;
};

export type ListApiKeysResponses = {
    /**
     * API keys retrieved successfully
     */
    200: ListApiKeysResponse;
};

export type ListApiKeysResponse2 = ListApiKeysResponses[keyof ListApiKeysResponses];

export type CreateApiKeyData = {
    body: CreateApiKeyRequest;
    path?: never;
    query?: never;
    url: '/api/api-keys';
};

export type CreateApiKeyErrors = {
    /**
     * Invalid request
     */
    400: unknown;
    /**
     * Unauthorized
     */
    401: unknown;
    /**
     * Internal server error
     */
    500: unknown;
};

export type CreateApiKeyResponses = {
    /**
     * API key created successfully
     */
    200: CreateApiKeyResponse;
};

export type CreateApiKeyResponse2 = CreateApiKeyResponses[keyof CreateApiKeyResponses];

export type DeactivateApiKeyData = {
    body?: never;
    path: {
        /**
         * API key ID to deactivate
         */
        key_id: string;
    };
    query?: never;
    url: '/api/api-keys/{key_id}';
};

export type DeactivateApiKeyErrors = {
    /**
     * Invalid key ID
     */
    400: unknown;
    /**
     * Unauthorized
     */
    401: unknown;
    /**
     * API key not found
     */
    404: unknown;
    /**
     * Internal server error
     */
    500: unknown;
};

export type DeactivateApiKeyResponses = {
    /**
     * API key deactivated successfully
     */
    200: DeactivateApiKeyResponse;
};

export type DeactivateApiKeyResponse2 = DeactivateApiKeyResponses[keyof DeactivateApiKeyResponses];

export type ListBotsData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/bots';
};

export type ListBotsErrors = {
    /**
     * Internal server error
     */
    500: unknown;
};

export type ListBotsResponses = {
    /**
     * Bots retrieved successfully
     */
    200: ListBotsResponse;
};

export type ListBotsResponse2 = ListBotsResponses[keyof ListBotsResponses];

export type CreateBotData = {
    body: CreateBotRequestBody;
    path?: never;
    query?: never;
    url: '/api/bots';
};

export type CreateBotErrors = {
    /**
     * Internal server error
     */
    500: unknown;
};

export type CreateBotResponses = {
    /**
     * Bot created successfully
     */
    200: CreateBotResponse;
};

export type CreateBotResponse2 = CreateBotResponses[keyof CreateBotResponses];

export type DeleteBotData = {
    body?: never;
    path: {
        /**
         * Bot identifier
         */
        bot_id: string;
    };
    query?: never;
    url: '/api/bots/{bot_id}';
};

export type DeleteBotErrors = {
    /**
     * Bot not found
     */
    404: unknown;
    /**
     * Internal server error
     */
    500: unknown;
};

export type DeleteBotResponses = {
    /**
     * Bot deleted successfully
     */
    204: void;
};

export type DeleteBotResponse = DeleteBotResponses[keyof DeleteBotResponses];

export type GetBotData = {
    body?: never;
    path: {
        /**
         * Bot identifier
         */
        bot_id: string;
    };
    query?: never;
    url: '/api/bots/{bot_id}';
};

export type GetBotErrors = {
    /**
     * Bot not found
     */
    404: unknown;
    /**
     * Internal server error
     */
    500: unknown;
};

export type GetBotResponses = {
    /**
     * Bot retrieved successfully
     */
    200: GetBotResponse;
};

export type GetBotResponse2 = GetBotResponses[keyof GetBotResponses];

export type UpdateBotData = {
    body: UpdateBotRequest;
    path: {
        /**
         * Bot identifier
         */
        bot_id: string;
    };
    query?: never;
    url: '/api/bots/{bot_id}';
};

export type UpdateBotErrors = {
    /**
     * Bot not found
     */
    404: unknown;
    /**
     * Internal server error
     */
    500: unknown;
};

export type UpdateBotResponses = {
    /**
     * Bot updated successfully
     */
    200: UpdateBotResponse;
};

export type UpdateBotResponse2 = UpdateBotResponses[keyof UpdateBotResponses];

export type GetClientConfigData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/config';
};

export type GetClientConfigErrors = {
    /**
     * Internal server error
     */
    500: unknown;
};

export type GetClientConfigResponses = {
    /**
     * Client configuration retrieved successfully
     */
    200: GetClientConfigResponse;
};

export type GetClientConfigResponse2 = GetClientConfigResponses[keyof GetClientConfigResponses];

export type UpdateClientConfigData = {
    body: UpdateClientConfigRequest;
    path?: never;
    query?: never;
    url: '/api/config';
};

export type UpdateClientConfigErrors = {
    /**
     * Invalid configuration
     */
    400: unknown;
    /**
     * Internal server error
     */
    500: unknown;
};

export type UpdateClientConfigResponses = {
    /**
     * Client configuration updated successfully
     */
    200: UpdateClientConfigResponse;
};

export type UpdateClientConfigResponse2 = UpdateClientConfigResponses[keyof UpdateClientConfigResponses];

export type ListContentData = {
    body?: never;
    path?: never;
    query: {
        /**
         * Bot identifier
         */
        bot_id: string;
        /**
         * Maximum number of items to return (default: 30, max: 30)
         */
        limit?: number | null;
        /**
         * Search query for semantic content search
         */
        search?: string | null;
        /**
         * Media type filter: 'image' or 'video' (defaults to all types if not specified)
         */
        media_type?: MediaTypeFilter | null;
    };
    url: '/api/content';
};

export type ListContentErrors = {
    /**
     * Invalid query parameters
     */
    400: unknown;
    /**
     * Bot not found
     */
    404: unknown;
    /**
     * Internal server error
     */
    500: unknown;
};

export type ListContentResponses = {
    /**
     * Content list retrieved successfully
     */
    200: ListContentResponse;
};

export type ListContentResponse2 = ListContentResponses[keyof ListContentResponses];

export type UploadContentData = {
    body: UploadContentRequest;
    path?: never;
    query?: never;
    url: '/api/content';
};

export type UploadContentErrors = {
    /**
     * Invalid request - URL is not an image or bot not found
     */
    400: unknown;
    /**
     * Internal server error
     */
    500: unknown;
};

export type UploadContentResponses = {
    /**
     * Content uploaded successfully
     */
    200: UploadContentResponse;
};

export type UploadContentResponse2 = UploadContentResponses[keyof UploadContentResponses];

export type DeleteContentData = {
    body?: never;
    path: {
        /**
         * Content identifier
         */
        content_id: string;
    };
    query?: never;
    url: '/api/content/{content_id}';
};

export type DeleteContentErrors = {
    /**
     * Content not found
     */
    404: unknown;
    /**
     * Internal server error
     */
    500: unknown;
};

export type DeleteContentResponses = {
    /**
     * Content deleted successfully
     */
    200: DeleteContentResponse;
};

export type DeleteContentResponse2 = DeleteContentResponses[keyof DeleteContentResponses];

export type ListConversationsData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Filter conversations by bot ID
         */
        bot_id?: string | null;
        /**
         * Filter conversations by user ID
         */
        user_id?: string | null;
        /**
         * Filter conversations by specific conversation ID
         */
        conversation_id?: string | null;
        /**
         * Filter conversations with at least this many messages
         */
        min_messages?: number | null;
        /**
         * Filter conversations with at most this many messages
         */
        max_messages?: number | null;
        /**
         * Search for conversations containing this text in messages
         */
        message_content?: string | null;
        /**
         * Filter conversations with last message after this timestamp (Unix epoch)
         */
        min_last_message_date?: number | null;
        /**
         * Filter conversations with last message before this timestamp (Unix epoch)
         */
        max_last_message_date?: number | null;
    };
    url: '/api/conversations';
};

export type ListConversationsErrors = {
    /**
     * Internal server error
     */
    500: unknown;
};

export type ListConversationsResponses = {
    /**
     * Conversations retrieved successfully
     */
    200: ListConversationsResponse;
};

export type ListConversationsResponse2 = ListConversationsResponses[keyof ListConversationsResponses];

export type CreateConversationData = {
    body: CreateConversationRequest;
    path?: never;
    query?: never;
    url: '/api/conversations';
};

export type CreateConversationErrors = {
    /**
     * Internal server error
     */
    500: unknown;
};

export type CreateConversationResponses = {
    /**
     * Conversation created successfully
     */
    200: CreateConversationResponse;
};

export type CreateConversationResponse2 = CreateConversationResponses[keyof CreateConversationResponses];

export type UpdateConversationData = {
    body: UpdateConversationRequestBody;
    path: {
        conversation_id: string;
    };
    query?: never;
    url: '/api/conversations/{conversation_id}';
};

export type UpdateConversationErrors = {
    /**
     * Conversation not found
     */
    404: unknown;
    /**
     * Internal server error
     */
    500: unknown;
};

export type UpdateConversationResponses = {
    /**
     * Conversation updated successfully
     */
    200: UpdateConversationResponse;
};

export type UpdateConversationResponse2 = UpdateConversationResponses[keyof UpdateConversationResponses];

export type GetConversationData = {
    body?: never;
    path: {
        /**
         * Conversation ID
         */
        id: string;
    };
    query?: never;
    url: '/api/conversations/{id}';
};

export type GetConversationErrors = {
    /**
     * Internal server error
     */
    500: unknown;
};

export type GetConversationResponses = {
    /**
     * Conversation retrieved successfully
     */
    200: GetConversationResponse;
};

export type GetConversationResponse2 = GetConversationResponses[keyof GetConversationResponses];

export type GenerateResponseSyncData = {
    body: GenerateResponseSyncRequest;
    path: {
        /**
         * Conversation ID
         */
        id: string;
    };
    query?: never;
    url: '/api/conversations/{id}/generate-response';
};

export type GenerateResponseSyncErrors = {
    /**
     * Conversation not found
     */
    404: unknown;
};

export type GenerateResponseSyncResponses = {
    /**
     * Response candidates generated
     */
    200: GenerateResponseSyncResponse;
};

export type GenerateResponseSyncResponse2 = GenerateResponseSyncResponses[keyof GenerateResponseSyncResponses];

export type GetMemoriesData = {
    body?: never;
    path: {
        /**
         * Conversation ID
         */
        id: string;
    };
    query?: never;
    url: '/api/conversations/{id}/memories';
};

export type GetMemoriesErrors = {
    /**
     * Conversation not found
     */
    404: unknown;
    /**
     * Internal server error
     */
    500: unknown;
};

export type GetMemoriesResponses = {
    /**
     * Memories retrieved successfully
     */
    200: GetMemoriesResponse;
};

export type GetMemoriesResponse2 = GetMemoriesResponses[keyof GetMemoriesResponses];

export type SendMessageData = {
    body: SendMessageRequest;
    path: {
        /**
         * Conversation ID
         */
        id: string;
    };
    query?: never;
    url: '/api/conversations/{id}/messages';
};

export type SendMessageErrors = {
    /**
     * Internal server error
     */
    500: unknown;
};

export type SendMessageResponses = {
    /**
     * Message sent successfully
     */
    202: unknown;
};

export type SendMessageOrCreateConversationData = {
    body: AddMessageRequest;
    path?: never;
    query?: never;
    url: '/api/messages';
};

export type SendMessageOrCreateConversationErrors = {
    /**
     * Internal server error
     */
    500: unknown;
};

export type SendMessageOrCreateConversationResponses = {
    /**
     * Message added successfully, conversation found or created
     */
    200: AddMessageResponse;
};

export type SendMessageOrCreateConversationResponse = SendMessageOrCreateConversationResponses[keyof SendMessageOrCreateConversationResponses];

export type ListUsersData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Number of users to return (default: 50, max: 100)
         */
        limit?: number | null;
        /**
         * Number of users to skip (default: 0)
         */
        offset?: number;
        /**
         * Search by user ID (partial match)
         */
        search_id?: string | null;
        /**
         * Search by username (partial match)
         */
        search_username?: string | null;
        /**
         * Sort users by field (created_at, last_message, message_count)
         */
        sort_by?: string;
        /**
         * Sort direction (true for descending, false for ascending)
         */
        sort_desc?: boolean;
    };
    url: '/api/users';
};

export type ListUsersErrors = {
    /**
     * Internal server error
     */
    500: unknown;
};

export type ListUsersResponses = {
    /**
     * Users retrieved successfully
     */
    200: ListUsersResponse;
};

export type ListUsersResponse2 = ListUsersResponses[keyof ListUsersResponses];

export type CreateUserData = {
    body: CreateUserRequestBody;
    path?: never;
    query?: never;
    url: '/api/users';
};

export type CreateUserErrors = {
    /**
     * Internal server error
     */
    500: unknown;
};

export type CreateUserResponses = {
    /**
     * User created successfully
     */
    200: CreateUserResponse;
};

export type CreateUserResponse2 = CreateUserResponses[keyof CreateUserResponses];

export type DeleteUserData = {
    body?: never;
    path: {
        /**
         * User identifier
         */
        user_id: string;
    };
    query?: never;
    url: '/api/users/{user_id}';
};

export type DeleteUserErrors = {
    /**
     * User not found
     */
    404: unknown;
    /**
     * Internal server error
     */
    500: unknown;
};

export type DeleteUserResponses = {
    /**
     * User deleted successfully
     */
    204: void;
};

export type DeleteUserResponse = DeleteUserResponses[keyof DeleteUserResponses];

export type GetUserData = {
    body?: never;
    path: {
        /**
         * User identifier
         */
        user_id: string;
    };
    query?: never;
    url: '/api/users/{user_id}';
};

export type GetUserErrors = {
    /**
     * User not found
     */
    404: unknown;
    /**
     * Internal server error
     */
    500: unknown;
};

export type GetUserResponses = {
    /**
     * User retrieved successfully
     */
    200: GetUserResponse;
};

export type GetUserResponse2 = GetUserResponses[keyof GetUserResponses];

export type UpdateUserData = {
    body: UpdateUserRequest;
    path: {
        /**
         * User identifier
         */
        user_id: string;
    };
    query?: never;
    url: '/api/users/{user_id}';
};

export type UpdateUserErrors = {
    /**
     * User not found
     */
    404: unknown;
    /**
     * Internal server error
     */
    500: unknown;
};

export type UpdateUserResponses = {
    /**
     * User updated successfully
     */
    200: UpdateUserResponse;
};

export type UpdateUserResponse2 = UpdateUserResponses[keyof UpdateUserResponses];

export type ClientOptions = {
    baseURL: `${string}://${string}` | (string & {});
};